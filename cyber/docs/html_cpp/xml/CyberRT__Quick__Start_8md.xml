<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="CyberRT__Quick__Start_8md" kind="file">
    <compoundname>CyberRT_Quick_Start.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>How<sp/>to<sp/>create<sp/>and<sp/>run<sp/>a<sp/>new<sp/>component<sp/>in<sp/>Apollo<sp/>Cyber<sp/>RT</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">Apollo<sp/>Cyber<sp/>RT<sp/>framework<sp/>is<sp/>built<sp/>based<sp/>on<sp/>the<sp/>concept<sp/>of<sp/>component.<sp/>As<sp/>a<sp/>basic<sp/>building<sp/>block<sp/>of<sp/>Apollo<sp/>Cyber<sp/>RT<sp/>framework,<sp/>each<sp/>component<sp/>contains<sp/>a<sp/>specific<sp/>algorithm<sp/>module<sp/>which<sp/>process<sp/>a<sp/>set<sp/>of<sp/>data<sp/>inputs<sp/>and<sp/>generate<sp/>a<sp/>set<sp/>of<sp/>outputs.</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal">In<sp/>order<sp/>to<sp/>successfully<sp/>create<sp/>and<sp/>launch<sp/>a<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>compoent,<sp/>there<sp/>are<sp/>four<sp/>essential<sp/>steps<sp/>that<sp/>need<sp/>to<sp/>happen:</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">-<sp/>Set<sp/>up<sp/>the<sp/>component<sp/>file<sp/>structure</highlight></codeline>
<codeline lineno="9"><highlight class="normal">-<sp/>Implement<sp/>the<sp/>component<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">-<sp/>Set<sp/>up<sp/>the<sp/>configuration<sp/>files</highlight></codeline>
<codeline lineno="11"><highlight class="normal">-<sp/>Launch<sp/>the<sp/>component</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">The<sp/>example<sp/>below<sp/>demonstrates<sp/>how<sp/>to<sp/>create<sp/>a<sp/>simple<sp/>component,<sp/>then<sp/>build,<sp/>run<sp/>and<sp/>watch<sp/>the<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>output<sp/>on<sp/>screen.<sp/>If<sp/>you<sp/>would<sp/>like<sp/>to<sp/>explore<sp/>more<sp/>about<sp/>Apollo<sp/>Cyber<sp/>RT,<sp/>you<sp/>can<sp/>find<sp/>a<sp/>couple<sp/>of<sp/>examples<sp/>showing<sp/>how<sp/>to<sp/>use<sp/>different<sp/>functionalities<sp/>of<sp/>the<sp/>framework<sp/>under<sp/>directory<sp/>`/apollo/cyber/examples/`.</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">*Note:<sp/>the<sp/>example<sp/>has<sp/>to<sp/>be<sp/>run<sp/>within<sp/>apollo<sp/>docker<sp/>environment<sp/>and<sp/>it</highlight><highlight class="stringliteral">&apos;s<sp/>compiled<sp/>with<sp/>Bazel.*</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral">##<sp/>Set<sp/>up<sp/>the<sp/>component<sp/>file<sp/>structure</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral">Please<sp/>create<sp/>the<sp/>following<sp/>files,<sp/>assumed<sp/>under<sp/>the<sp/>directory<sp/>of<sp/>`/apollo/cyber/examples/common_component_example/`:</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">-<sp/>Header<sp/>file:<sp/>common_component_example.h</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">-<sp/>Source<sp/>file:<sp/>common_component_example.cc</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">-<sp/>Build<sp/>file:<sp/>BUILD</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">-<sp/>DAG<sp/>dependency<sp/>file:<sp/>common.dag</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">-<sp/>Launch<sp/>file:<sp/>common.launch</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral">##<sp/>Implement<sp/>the<sp/>component<sp/>class</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">###<sp/>Implement<sp/>component<sp/>header<sp/>file</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral">To<sp/>implement<sp/>`common_component_example.h`:</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral">-<sp/>Inherit<sp/>the<sp/>Component<sp/>class</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral">-<sp/>Define<sp/>your<sp/>own<sp/>`Init`<sp/>and<sp/>`Proc`<sp/>functions.<sp/>Proc<sp/>function<sp/>needs<sp/>to<sp/>specify<sp/>its<sp/>input<sp/>data<sp/>types</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral">-<sp/>Register<sp/>your<sp/>component<sp/>classes<sp/>to<sp/>be<sp/>global<sp/>by<sp/>using</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">`CYBER_REGISTER_COMPONENT`</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">```cpp</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">#include<sp/>&lt;memory&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral">#include<sp/>&quot;cyber/class_loader/class_loader.h&quot;</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">#include<sp/>&quot;cyber/component/component.h&quot;</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">#include<sp/>&quot;cyber/examples/proto/examples.pb.h&quot;</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">using<sp/>apollo::cyber::examples::proto::Driver;</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">using<sp/>apollo::cyber::Component;</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">using<sp/>apollo::cyber::ComponentBase;</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral">class<sp/>CommonComponentSample<sp/>:<sp/>public<sp/>Component&lt;Driver,<sp/>Driver&gt;<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/>bool<sp/>Init()<sp/>override;</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/>bool<sp/>Proc(const<sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg0,</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg1)<sp/>override;</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral">CYBER_REGISTER_COMPONENT(CommonComponentSample)</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral">###<sp/>Implement<sp/>the<sp/>source<sp/>file<sp/>for<sp/>the<sp/>example<sp/>component</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral">For<sp/>`common_component_example.cc`,<sp/>both<sp/>`Init`<sp/>and<sp/>`Proc`<sp/>functions<sp/>need<sp/>to<sp/>be<sp/>implemented.</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral">```cpp</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral">#include<sp/>&quot;cyber/examples/common_component_example/common_component_example.h&quot;</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral">#include<sp/>&quot;cyber/class_loader/class_loader.h&quot;</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral">#include<sp/>&quot;cyber/component/component.h&quot;</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral">bool<sp/>CommonComponentSample::Init()<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;Commontest<sp/>component<sp/>init&quot;;</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral">bool<sp/>CommonComponentSample::Proc(const<sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg0,</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg1)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;Start<sp/>common<sp/>component<sp/>Proc<sp/>[&quot;<sp/>&lt;&lt;<sp/>msg0-&gt;msg_id()<sp/>&lt;&lt;<sp/>&quot;]<sp/>[&quot;</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>msg1-&gt;msg_id()<sp/>&lt;&lt;<sp/>&quot;]&quot;;</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral">###<sp/>Create<sp/>the<sp/>build<sp/>file<sp/>for<sp/>the<sp/>example<sp/>component</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral">Create<sp/>bazel<sp/>BUILD<sp/>file.</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral">```bash</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral">load(&quot;//tools:cpplint.bzl&quot;,<sp/>&quot;cpplint&quot;)</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral">package(default_visibility<sp/>=<sp/>[&quot;//visibility:public&quot;])</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral">cc_binary(</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;libcommon_component_example.so&quot;,</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>deps<sp/>=<sp/>[&quot;:common_component_example_lib&quot;],</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linkopts<sp/>=<sp/>[&quot;-shared&quot;],</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linkstatic<sp/>=<sp/>False,</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral">cc_library(</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;common_component_example_lib&quot;,</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>srcs<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;common_component_example.cc&quot;,</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>hdrs<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;common_component_example.h&quot;,</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>deps<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;//cyber&quot;,</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;//cyber/examples/proto:examples_cc_proto&quot;,</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral">cpplint()</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral">##<sp/>Set<sp/>up<sp/>the<sp/>configuration<sp/>files</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral">###<sp/>Configure<sp/>the<sp/>DAG<sp/>dependency<sp/>file</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral">To<sp/>configure<sp/>the<sp/>DAG<sp/>dependency<sp/>file<sp/>(common.dag),<sp/>specify<sp/>the<sp/>following<sp/>items<sp/>as<sp/>below:</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/>-<sp/>Channel<sp/>names:<sp/>for<sp/>data<sp/>input<sp/>and<sp/>output</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/>-<sp/>Library<sp/>path:<sp/>library<sp/>built<sp/>from<sp/>component<sp/>class</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/>-<sp/>Class<sp/>name:<sp/>the<sp/>class<sp/>name<sp/>of<sp/>the<sp/>component</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral">```bash</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral">#<sp/>Define<sp/>all<sp/>coms<sp/>in<sp/>DAG<sp/>streaming.</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>component_config<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>component_library<sp/>:<sp/>&quot;/apollo/bazel-bin/cyber/examples/common_component_example/libcommon_component_example.so&quot;</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>components<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_name<sp/>:<sp/>&quot;CommonComponentSample&quot;</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>:<sp/>&quot;common&quot;</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readers<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel:<sp/>&quot;/apollo/prediction&quot;</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readers<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel:<sp/>&quot;/apollo/test&quot;</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral">###<sp/>Configure<sp/>the<sp/>launch<sp/>file</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral">To<sp/>configure<sp/>the<sp/>launch<sp/>(common.launch)<sp/>file,<sp/>specify<sp/>the<sp/>following<sp/>items:</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/>-<sp/>The<sp/>name<sp/>of<sp/>the<sp/>component</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/>-<sp/>The<sp/>dag<sp/>file<sp/>you<sp/>just<sp/>created<sp/>in<sp/>the<sp/>previous<sp/>step.</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/>-<sp/>The<sp/>name<sp/>of<sp/>the<sp/>process<sp/>which<sp/>the<sp/>component<sp/>runs<sp/>within</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral">```bash</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral">&lt;cyber&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&lt;component&gt;</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;name&gt;common&lt;/name&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;dag_conf&gt;/apollo/cyber/examples/common_component_example/common.dag&lt;/dag_conf&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;process_name&gt;common&lt;/process_name&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&lt;/component&gt;</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral">&lt;/cyber&gt;</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral">##<sp/>Launch<sp/>the<sp/>component</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral">Build<sp/>the<sp/>component<sp/>by<sp/>running<sp/>the<sp/>command<sp/>below:</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral">```bash</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral">bash<sp/>/apollo/apollo.sh<sp/>build</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral">Note:<sp/>make<sp/>sure<sp/>the<sp/>example<sp/>component<sp/>builds<sp/>fine</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral">Then<sp/>configure<sp/>the<sp/>environment:</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral">```bash</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral">cd<sp/>/apollo/cyber</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral">source<sp/>setup.bash</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral">There<sp/>are<sp/>two<sp/>ways<sp/>to<sp/>launch<sp/>the<sp/>component:</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral">-<sp/>Launch<sp/>with<sp/>the<sp/>launch<sp/>file<sp/>(recommended)</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral">```bash</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral">cyber_launch<sp/>start<sp/>/apollo/cyber/examples/common_component_example/common.launch</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral">-<sp/>Launch<sp/>with<sp/>the<sp/>DAG<sp/>file</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral">```bash</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral">mainboard<sp/>-d<sp/>/apollo/cyber/examples/common_component_example/common.dag</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral">```</highlight></codeline>
    </programlisting>
    <location file="/home/work/apollo-fork/apollo/cyber/docs/CyberRT_Quick_Start.md"/>
  </compounddef>
</doxygen>
