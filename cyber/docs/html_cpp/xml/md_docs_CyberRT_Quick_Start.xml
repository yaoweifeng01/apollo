<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="md_docs_CyberRT_Quick_Start" kind="page">
    <compoundname>md_docs_CyberRT_Quick_Start</compoundname>
    <title>How to create and run a new component in Apollo Cyber RT</title>
    <detaileddescription>
<para>Apollo Cyber RT framework is built based on the concept of component. As a basic building block of Apollo Cyber RT framework, each component contains a specific algorithm module which process a set of data inputs and generate a set of outputs.</para><para>In order to successfully create and launch a new compoent, there are four essential steps that need to happen:</para><para><itemizedlist>
<listitem><para>Set up the component file structure</para></listitem><listitem><para>Implement the component class</para></listitem><listitem><para>Set up the configuration files</para></listitem><listitem><para>Launch the component</para></listitem></itemizedlist>
</para><para>The example below demonstrates how to create a simple component, then build, run and watch the final output on screen. If you would like to explore more about Apollo Cyber RT, you can find a couple of examples showing how to use different functionalities of the framework under directory <computeroutput>/apollo/cyber/examples/</computeroutput>.</para><para><emphasis>Note: the example has to be run within apollo docker environment and it&apos;s compiled with Bazel.</emphasis></para><para><heading level="2">Set up the component file structure</heading>
</para><para>Please create the following files, assumed under the directory of <computeroutput>/apollo/cyber/examples/common_component_example/</computeroutput>:</para><para><itemizedlist>
<listitem><para>Header file: <ref refid="common__component__example_8h" kindref="compound">common_component_example.h</ref></para></listitem><listitem><para>Source file: common_component_example.cc</para></listitem><listitem><para>Build file: BUILD</para></listitem><listitem><para>DAG dependency file: common.dag</para></listitem><listitem><para>Launch file: common.launch</para></listitem></itemizedlist>
</para><para><heading level="2">Implement the component class</heading>
</para><para><heading level="3">Implement component header file</heading>
</para><para>To implement <computeroutput><ref refid="common__component__example_8h" kindref="compound">common_component_example.h</ref></computeroutput>:</para><para><itemizedlist>
<listitem><para>Inherit the Component class</para></listitem><listitem><para>Define your own <computeroutput>Init</computeroutput> and <computeroutput>Proc</computeroutput> functions. Proc function needs to specify its input data types</para></listitem><listitem><para>Register your component classes to be global by using <computeroutput>CYBER_REGISTER_COMPONENT</computeroutput></para></listitem></itemizedlist>
</para><para>```cpp #include &lt;memory&gt; #include &quot;cyber/class_loader/class_loader.h&quot; #include &quot;cyber/component/component.h&quot; #include &quot;cyber/examples/proto/examples.pb.h&quot;</para><para>using apollo::cyber::examples::proto::Driver; using <ref refid="classapollo_1_1cyber_1_1Component" kindref="compound">apollo::cyber::Component</ref>; using <ref refid="classapollo_1_1cyber_1_1ComponentBase" kindref="compound">apollo::cyber::ComponentBase</ref>;</para><para>class <ref refid="classCommonComponentSample" kindref="compound">CommonComponentSample</ref> : public <ref refid="classapollo_1_1cyber_1_1Component" kindref="compound">Component&lt;Driver, Driver&gt;</ref> { public: bool <ref refid="namespaceapollo_1_1cyber_1a2d055a81b338116634deaf8ac3367aca" kindref="member">Init()</ref> override; bool Proc(const std::shared_ptr&lt;Driver&gt;&amp; msg0, const std::shared_ptr&lt;Driver&gt;&amp; msg1) override; };</para><para><ref refid="component_8h_1a031103527dc7f59a627459d635de10f8" kindref="member">CYBER_REGISTER_COMPONENT(CommonComponentSample)</ref> ```</para><para><heading level="3">Implement the source file for the example component</heading>
</para><para>For <computeroutput>common_component_example.cc</computeroutput>, both <computeroutput>Init</computeroutput> and <computeroutput>Proc</computeroutput> functions need to be implemented.</para><para>```cpp #include &quot;cyber/examples/common_component_example/common_component_example.h&quot; #include &quot;cyber/class_loader/class_loader.h&quot; #include &quot;cyber/component/component.h&quot;</para><para>bool <ref refid="classCommonComponentSample_1ae2a3f8c8ce4b9cfd9c6b357628bc84ee" kindref="member">CommonComponentSample::Init()</ref> { AINFO &lt;&lt; &quot;Commontest component init&quot;; return true; }</para><para>bool <ref refid="classCommonComponentSample_1ab84ea2f74b8ab92a74733b392319ea5e" kindref="member">CommonComponentSample::Proc</ref>(const std::shared_ptr&lt;Driver&gt;&amp; msg0, const std::shared_ptr&lt;Driver&gt;&amp; msg1) { AINFO &lt;&lt; &quot;Start common component Proc [&quot; &lt;&lt; msg0-&gt;msg_id() &lt;&lt; &quot;] [&quot; &lt;&lt; msg1-&gt;msg_id() &lt;&lt; &quot;]&quot;; return true; } ```</para><para><heading level="3">Create the build file for the example component</heading>
</para><para>Create bazel BUILD file.</para><para>```bash load(&quot;//tools:cpplint.bzl&quot;, &quot;cpplint&quot;)</para><para>package(default_visibility = [&quot;//visibility:public&quot;])</para><para>cc_binary( name = &quot;libcommon_component_example.so&quot;, deps = [&quot;:common_component_example_lib&quot;], linkopts = [&quot;-shared&quot;], linkstatic = False, )</para><para>cc_library( name = &quot;common_component_example_lib&quot;, srcs = [ &quot;common_component_example.cc&quot;, ], hdrs = [ &quot;common_component_example.h&quot;, ], deps = [ &quot;//cyber&quot;, &quot;//cyber/examples/proto:examples_cc_proto&quot;, ], )</para><para>cpplint() ``` <heading level="2">Set up the configuration files</heading>
</para><para><heading level="3">Configure the DAG dependency file</heading>
</para><para>To configure the DAG dependency file (common.dag), specify the following items as below:</para><para><itemizedlist>
<listitem><para>Channel names: for data input and output</para></listitem><listitem><para>Library path: library built from component class</para></listitem><listitem><para>Class name: the class name of the component</para></listitem></itemizedlist>
</para><para>```bash <heading level="1">Define all coms in DAG streaming.</heading>
</para><para>component_config { component_library : &quot;/apollo/bazel-bin/cyber/examples/common_component_example/libcommon_component_example.so&quot; components { class_name : &quot;CommonComponentSample&quot; config { name : &quot;common&quot; readers { channel: &quot;/apollo/prediction&quot; } readers { channel: &quot;/apollo/test&quot; } } } } ```</para><para><heading level="3">Configure the launch file</heading>
</para><para>To configure the launch (common.launch) file, specify the following items:</para><para><itemizedlist>
<listitem><para>The name of the component</para></listitem><listitem><para>The dag file you just created in the previous step.</para></listitem><listitem><para>The name of the process which the component runs within</para></listitem></itemizedlist>
</para><para>```bash &lt;cyber&gt; &lt;component&gt; &lt;name&gt;common&lt;/name&gt; &lt;dag_conf&gt;/apollo/cyber/examples/common_component_example/common.dag&lt;/dag_conf&gt; &lt;process_name&gt;common&lt;/process_name&gt; &lt;/component&gt; &lt;/cyber&gt; ```</para><para><heading level="2">Launch the component</heading>
</para><para>Build the component by running the command below:</para><para>```bash bash /apollo/apollo.sh build ```</para><para>Note: make sure the example component builds fine</para><para>Then configure the environment:</para><para>```bash cd /apollo/cyber source setup.bash ```</para><para>There are two ways to launch the component:</para><para><itemizedlist>
<listitem><para>Launch with the launch file (recommended)</para></listitem></itemizedlist>
</para><para>```bash cyber_launch start /apollo/cyber/examples/common_component_example/common.launch ```</para><para><itemizedlist>
<listitem><para>Launch with the DAG file</para></listitem></itemizedlist>
</para><para>```bash mainboard -d /apollo/cyber/examples/common_component_example/common.dag ``` </para>    </detaileddescription>
  </compounddef>
</doxygen>
