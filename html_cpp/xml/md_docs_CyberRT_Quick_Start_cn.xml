<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="md_docs_CyberRT_Quick_Start_cn" kind="page">
    <compoundname>md_docs_CyberRT_Quick_Start_cn</compoundname>
    <title>如何使用Cyber RT来创建一个新的组件</title>
    <detaileddescription>
<para>Apollo Cyber 运行时框架(Apollo Cyber RT Framework) 是基于组件概念来构建的. 每个组件都是Cyber框架的一个构建块, 它包括一个特定的算法模块， 此算法模块处理一组输入数椐并产生一组输出数椐。</para><para>要创建并启动一个算法组件, 需要通过以下4个步骤:</para><para><itemizedlist>
<listitem><para>初如化组件的文件结构</para></listitem><listitem><para>实现组件类</para></listitem><listitem><para>设置配置文件</para></listitem><listitem><para>启动组件</para></listitem></itemizedlist>
</para><para>下面的例子展示了如何创建，编译，运行一个组件，并观察组件在屏幕上的输出。 如果想更深入的探索Apollo Cyber RT框架, 可以在这个目录<computeroutput>/apollo/cyber/examples/</computeroutput>找到很多例子，这些例子详细展示了如何使用Cyber框架的各种功能。</para><para><emphasis>Note: 这些例子必须运行在Apollo docker环境， 且需要通过Bazel来编译.</emphasis></para><para><heading level="2">初始化组件文件结构</heading>
</para><para>例如组件的根目录为<computeroutput>/apollo/cyber/examples/common_component_example/</computeroutput>需要创建以下文件:</para><para><itemizedlist>
<listitem><para>Header file: <ref refid="common__component__example_8h" kindref="compound">common_component_example.h</ref></para></listitem><listitem><para>Source file: common_component_example.cc</para></listitem><listitem><para>Build file: BUILD</para></listitem><listitem><para>DAG dependency file: common.dag</para></listitem><listitem><para>Launch file: common.launch</para></listitem></itemizedlist>
</para><para><heading level="2">实现组件类</heading>
</para><para><heading level="3">实现组件头文件</heading>
</para><para>如何实现<computeroutput><ref refid="common__component__example_8h" kindref="compound">common_component_example.h</ref></computeroutput>:</para><para><itemizedlist>
<listitem><para>继承 Component 类</para></listitem><listitem><para>定义自己的 <computeroutput>Init</computeroutput> 和 <computeroutput>Proc</computeroutput> 函数. Proc 需要指定输入数椐类型。</para></listitem><listitem><para>使用<computeroutput>CYBER_REGISTER_COMPONENT</computeroutput>宏定义把组件类注册成全局可用。</para></listitem></itemizedlist>
</para><para>```cpp #include &lt;memory&gt; #include &quot;cyber/class_loader/class_loader.h&quot; #include &quot;cyber/component/component.h&quot; #include &quot;cyber/examples/proto/examples.pb.h&quot;</para><para>using apollo::cyber::examples::proto::Driver; using <ref refid="classapollo_1_1cyber_1_1Component" kindref="compound">apollo::cyber::Component</ref>; using <ref refid="classapollo_1_1cyber_1_1ComponentBase" kindref="compound">apollo::cyber::ComponentBase</ref>;</para><para>class <ref refid="classCommonComponentSample" kindref="compound">CommonComponentSample</ref> : public <ref refid="classapollo_1_1cyber_1_1Component" kindref="compound">Component&lt;Driver, Driver&gt;</ref> { public: bool <ref refid="namespaceapollo_1_1cyber_1a2d055a81b338116634deaf8ac3367aca" kindref="member">Init()</ref> override; bool Proc(const std::shared_ptr&lt;Driver&gt;&amp; msg0, const std::shared_ptr&lt;Driver&gt;&amp; msg1) override; };</para><para><ref refid="component_8h_1a031103527dc7f59a627459d635de10f8" kindref="member">CYBER_REGISTER_COMPONENT(CommonComponentSample)</ref> ```</para><para><heading level="3">实现组件源文件</heading>
</para><para>对于源文件 <computeroutput>common_component_example.cc</computeroutput>, <computeroutput>Init</computeroutput> 和 <computeroutput>Proc</computeroutput> 这两个函数需要实现.</para><para>```cpp #include &quot;cyber/examples/common_component_example/common_component_example.h&quot; #include &quot;cyber/class_loader/class_loader.h&quot; #include &quot;cyber/component/component.h&quot;</para><para>bool <ref refid="classCommonComponentSample_1ae2a3f8c8ce4b9cfd9c6b357628bc84ee" kindref="member">CommonComponentSample::Init()</ref> { AINFO &lt;&lt; &quot;Commontest component init&quot;; return true; }</para><para>bool <ref refid="classCommonComponentSample_1ab84ea2f74b8ab92a74733b392319ea5e" kindref="member">CommonComponentSample::Proc</ref>(const std::shared_ptr&lt;Driver&gt;&amp; msg0, const std::shared_ptr&lt;Driver&gt;&amp; msg1) { AINFO &lt;&lt; &quot;Start common component Proc [&quot; &lt;&lt; msg0-&gt;msg_id() &lt;&lt; &quot;] [&quot; &lt;&lt; msg1-&gt;msg_id() &lt;&lt; &quot;]&quot;; return true; } ```</para><para><heading level="3">创建BUILD编译文件</heading>
</para><para>创建 bazel BUILD 文件.</para><para>```bash load(&quot;//tools:cpplint.bzl&quot;, &quot;cpplint&quot;)</para><para>package(default_visibility = [&quot;//visibility:public&quot;])</para><para>cc_binary( name = &quot;libcommon_component_example.so&quot;, deps = [&quot;:common_component_example_lib&quot;], linkopts = [&quot;-shared&quot;], linkstatic = False, )</para><para>cc_library( name = &quot;common_component_example_lib&quot;, srcs = [ &quot;common_component_example.cc&quot;, ], hdrs = [ &quot;common_component_example.h&quot;, ], deps = [ &quot;//cyber&quot;, &quot;//cyber/examples/proto:examples_cc_proto&quot;, ], )</para><para>cpplint() ``` <heading level="2">设置配置文件</heading>
</para><para><heading level="3">配置DAG依赖文件</heading>
</para><para>在DAG依赖配置文件 (例如common.dag)中配置下面的项:</para><para><itemizedlist>
<listitem><para>Channel names: 输入输出数椐的Channel名字</para></listitem><listitem><para>Library path: 此组件最终编译出的库的名字</para></listitem><listitem><para>Class name: 此组件的入口类的名字</para></listitem></itemizedlist>
</para><para>```bash <heading level="1">Define all coms in DAG streaming.</heading>
</para><para>component_config { component_library : &quot;/apollo/bazel-bin/cyber/examples/common_component_example/libcommon_component_example.so&quot; components { class_name : &quot;CommonComponentSample&quot; config { name : &quot;common&quot; readers { channel: &quot;/apollo/prediction&quot; } readers { channel: &quot;/apollo/test&quot; } } } } ```</para><para><heading level="3">配置launch启动文件</heading>
</para><para>在launch启动文件中(common.launch), 配置下面的项:</para><para><itemizedlist>
<listitem><para>组件的名字</para></listitem><listitem><para>上一步创建的dag配置的名字。</para></listitem><listitem><para>组件运行时所在的进程目录。</para></listitem></itemizedlist>
</para><para>```bash &lt;cyber&gt; &lt;component&gt; &lt;name&gt;common&lt;/name&gt; &lt;dag_conf&gt;/apollo/cyber/examples/common_component_example/common.dag&lt;/dag_conf&gt; &lt;process_name&gt;common&lt;/process_name&gt; &lt;/component&gt; &lt;/cyber&gt; ```</para><para><heading level="2">启动这个组件</heading>
</para><para>通过下面的命令来编译组件:</para><para>```bash bash /apollo/apollo.sh build ```</para><para>Note: 确定组件正常编译成功</para><para>然后配置环境:</para><para>```bash cd /apollo/cyber source setup.bash ```</para><para>有两种方法来启动组件:</para><para><itemizedlist>
<listitem><para>使用launch文件来启动 (推荐这种方式)</para></listitem></itemizedlist>
</para><para>```bash cyber_launch start /apollo/cyber/examples/common_component_example/common.launch ```</para><para><itemizedlist>
<listitem><para>使用dag文件来启动</para></listitem></itemizedlist>
</para><para>```bash mainboard -d /apollo/cyber/examples/common_component_example/common.dag ``` </para>    </detaileddescription>
  </compounddef>
</doxygen>
