<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="CyberRT__Migration__Guide_8md" kind="file">
    <compoundname>CyberRT_Migration_Guide.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#<sp/>Migration<sp/>guide<sp/>from<sp/>Apollo<sp/>ROS<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="normal">This<sp/>article<sp/>describes<sp/>the<sp/>essential<sp/>changes<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>projects<sp/>to<sp/>migrate<sp/>from<sp/>Apollo<sp/>ROS(3.0<sp/>and<sp/>before)<sp/>to<sp/>Apollo<sp/>Cyber-RT(3.5).<sp/>We<sp/>will<sp/>be<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>the<sp/>very<sp/>first<sp/>ROS<sp/>project<sp/>talker/listener<sp/>as<sp/>example<sp/>to<sp/>demostrate<sp/>step<sp/>by<sp/>step<sp/>migration<sp/>instruction.</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">##<sp/>Build<sp/>system</highlight></codeline>
<codeline lineno="5"><highlight class="normal">ROS<sp/>use<sp/>`CMake`<sp/>as<sp/>its<sp/>build<sp/>system<sp/>but<sp/>Cyber-RT<sp/>use<sp/>`bazel`.<sp/>In<sp/>a<sp/>ROS<sp/>project,<sp/>CmakeLists.txt<sp/>and<sp/>package.xml<sp/>are<sp/>required<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>defining<sp/>build<sp/>configs<sp/>like<sp/>build<sp/>target,<sp/>dependency,<sp/>message<sp/>files<sp/>and<sp/>so<sp/>on.<sp/>As<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>Cyber-RT<sp/>component,<sp/>a<sp/>single<sp/>bazel<sp/>BUILD<sp/>file<sp/>covers.<sp/>Some<sp/>key<sp/>build<sp/>config<sp/>mappings<sp/>are<sp/>listed<sp/>below.</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">Cmake</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">```</highlight></codeline>
<codeline lineno="10"><highlight class="normal">project(pb_msgs_example)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">add_proto_files(</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>DIRECTORY<sp/>proto</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>FILES<sp/>chatter.proto</highlight></codeline>
<codeline lineno="14"><highlight class="normal">)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>Declare<sp/>a<sp/>C++<sp/>executable</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal">add_executable(pb_talker<sp/>src/talker.cpp)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">target_link_libraries(pb_talker<sp/>${catkin_LIBRARIES}pb_msgs_example_proto)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">add_executable(pb_listener<sp/>src/listener.cpp)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">target_link_libraries(pb_listener<sp/>${catkin_LIBRARIES}<sp/><sp/>pb_msgs_example_proto)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">```<sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">Bazel</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">```</highlight></codeline>
<codeline lineno="25"><highlight class="normal">cc_binary(</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;talker&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>srcs<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;talker.cc&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>deps<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;//cyber&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;//cyber/examples/proto:examples_cc_proto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">cc_binary(</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>&quot;listener&quot;,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>srcs<sp/>=<sp/>[&quot;listener.cc&quot;],</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>deps<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="comment">//cyber&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="comment">//cyber/examples/proto:examples_cc_proto&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">```</highlight></codeline>
<codeline lineno="42"><highlight class="normal">We<sp/>can<sp/>find<sp/>the<sp/>mapping<sp/>easily<sp/>from<sp/>the<sp/>2<sp/>file<sp/>snippets.<sp/>For<sp/>example,<sp/>`pb_talker`<sp/>and<sp/>`src/talker.cpp`<sp/>in<sp/>cmake<sp/>`add_executable`<sp/>setting<sp/>map<sp/>to<sp/>`name<sp/>=<sp/>&quot;talker&quot;`<sp/>and<sp/>`srcs<sp/>=<sp/>[&quot;talker.cc&quot;]`<sp/>in<sp/>BUILD<sp/>file<sp/>`cc_binary`.</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Proto</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="normal">Apollo<sp/>ROS<sp/>has<sp/>customized<sp/>to<sp/>support<sp/>proto<sp/>message<sp/>formate<sp/>that<sp/>a<sp/>separate<sp/>section<sp/>`add_proto_files`<sp/>and<sp/>projectName_proto(`pb_msgs_example_proto`)<sp/>in<sp/>`target_link_libraries`<sp/>are<sp/>required<sp/>to<sp/>send<sp/>message<sp/>in<sp/>proto<sp/>formate.<sp/>For<sp/>config<sp/>proto<sp/>message<sp/>in<sp/>Cyber-RT,<sp/>it&apos;s<sp/>as<sp/>simple<sp/>as<sp/>adding<sp/>the<sp/>target<sp/>proto<sp/>file<sp/>path<sp/>concantenated<sp/>with<sp/>name<sp/>of<sp/>`cc_proto_library`<sp/>in<sp/>`deps`<sp/>setting.<sp/>The<sp/>`cc_proto_library`<sp/>is<sp/>set<sp/>up<sp/>in<sp/>BUILD<sp/>file<sp/>under<sp/>proto<sp/>folder.<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">```C</highlight></codeline>
<codeline lineno="47"><highlight class="normal">cc_proto_library(</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>&quot;examples_cc_proto&quot;,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>deps<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;:examples_proto&quot;,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>],</highlight></codeline>
<codeline lineno="52"><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">proto_library(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>&quot;examples_proto&quot;,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>srcs<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;examples.proto&quot;,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>],</highlight></codeline>
<codeline lineno="58"><highlight class="normal">)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">```<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">The<sp/>package<sp/>definition<sp/>has<sp/>also<sp/>changed<sp/>in<sp/>Cyber-RT.<sp/>In<sp/>Apollo<sp/>ROS<sp/>a<sp/>fixed<sp/>package<sp/>`package<sp/>pb_msgs;`<sp/>is<sp/>used<sp/>for<sp/>proto<sp/>files,<sp/>but<sp/>in<sp/>Cyber-RT,<sp/>the<sp/>proto<sp/>file<sp/>path<sp/>`package<sp/>apollo.cyber.examples.proto;`<sp/>is<sp/>used<sp/>instead.<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>Folder<sp/>structure</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="normal">As<sp/>shown<sp/>below,<sp/>Cyber-RT<sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal"><sp/>the<sp/>src<sp/>folder<sp/>and<sp/>pull<sp/>all<sp/>source<sp/>code<sp/>in<sp/>the<sp/>same<sp/>folder<sp/>as<sp/>BUILD<sp/>file.<sp/>BUILD<sp/>file<sp/>plays<sp/>the<sp/>same<sp/>role<sp/>as<sp/>CMakeLists.txt<sp/>plus<sp/>package.xml.<sp/>Both<sp/>Cyber-RT<sp/>and<sp/>Apollo<sp/>ROS<sp/>talker/listener<sp/>example<sp/>have<sp/>a<sp/>proto<sp/>folder<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>message<sp/>proto<sp/>files<sp/>but<sp/>Cyber-RT<sp/>requires<sp/>a<sp/>separate<sp/>BUILD<sp/>file<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>proto<sp/>folder<sp/>to<sp/>set<sp/>up<sp/>the<sp/>proto<sp/>library.</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Apollo<sp/>ROS</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"></highlight><highlight class="normal">-<sp/>CMakeLists.txt</highlight></codeline>
<codeline lineno="68"><highlight class="normal">-<sp/>package.xml</highlight></codeline>
<codeline lineno="69"><highlight class="normal">-<sp/>proto</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>-<sp/>chatter.proto<sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal">-<sp/>src</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>-<sp/>listener.cpp</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>-<sp/>talker.cpp</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Cyber-RT</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="normal">-<sp/>BUILD</highlight></codeline>
<codeline lineno="77"><highlight class="normal">-<sp/>listener.ccc</highlight></codeline>
<codeline lineno="78"><highlight class="normal">-<sp/>talker.cc</highlight></codeline>
<codeline lineno="79"><highlight class="normal">-<sp/>proto</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>-<sp/>BUILD</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>-<sp/>examples.proto<sp/>(with<sp/>chatter<sp/>message)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>Update<sp/>source<sp/>code</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Listener</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal">Cyber-RT</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">```c</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cyber_8h" kindref="compound">cyber/cyber.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/examples/proto/examples.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MessageCallback(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;apollo::cyber::examples::proto::Chatter&gt;&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="log_8h_1af1a972c64154fbc2f9b56766c89add01" kindref="member">AINFO</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Received<sp/>message<sp/>seq-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg-&gt;seq();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="log_8h_1af1a972c64154fbc2f9b56766c89add01" kindref="member">AINFO</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;msgcontent-&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg-&gt;content();</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>cyber<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="namespaceapollo_1_1cyber_1a2d055a81b338116634deaf8ac3367aca" kindref="member">apollo::cyber::Init</ref>(argv[0]);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>listener<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>listener_node<sp/>=<sp/><ref refid="namespaceapollo_1_1cyber_1ae369c5de0279f2a5745d0438d532bc89" kindref="member">apollo::cyber::CreateNode</ref>(</highlight><highlight class="stringliteral">&quot;listener&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>listener</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>listener<sp/>=</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listener_node-&gt;CreateReader&lt;apollo::cyber::examples::proto::Chatter&gt;(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;channel/chatter&quot;</highlight><highlight class="normal">,<sp/>MessageCallback);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="namespaceapollo_1_1cyber_1a7929114e78a9c595b0ee715968ca2712" kindref="member">apollo::cyber::WaitForShutdown</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">```</highlight></codeline>
<codeline lineno="111"><highlight class="normal">ROS</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">```c</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ros/ros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chatter.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MessageCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::shared_ptr&lt;pb_msgs::Chatter&gt;&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>ROS_INFO_STREAM(</highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg-&gt;stamp().sec()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg-&gt;stamp().nsec());</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;I<sp/>heard<sp/>pb<sp/>Chatter<sp/>message:<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>msg-&gt;content().c_str());</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;listener&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>n;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>ros::Subscriber<sp/>pb_sub<sp/>=<sp/>n.subscribe(</highlight><highlight class="stringliteral">&quot;chatter&quot;</highlight><highlight class="normal">,<sp/>1000,<sp/>MessageCallback);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>ros::spin();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal">```</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">You<sp/>can<sp/>see<sp/>easily<sp/>from<sp/>the<sp/>two<sp/>listener<sp/>code<sp/>above<sp/>that<sp/>Cyber-RT<sp/>provides<sp/>very<sp/>similar<sp/>API<sp/>to<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>developers<sp/>to<sp/>migrate<sp/>from<sp/>ROS.<sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">-<sp/>`ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;listener&quot;</highlight><highlight class="normal">);`<sp/>--&gt;<sp/>`<ref refid="namespaceapollo_1_1cyber_1a2d055a81b338116634deaf8ac3367aca" kindref="member">apollo::cyber::Init</ref>(argv[0]);`</highlight></codeline>
<codeline lineno="134"><highlight class="normal">-<sp/>`ros::NodeHandle<sp/>n;`<sp/>--&gt;<sp/>`</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>listener_node<sp/>=<sp/><ref refid="namespaceapollo_1_1cyber_1ae369c5de0279f2a5745d0438d532bc89" kindref="member">apollo::cyber::CreateNode</ref>(</highlight><highlight class="stringliteral">&quot;listener&quot;</highlight><highlight class="normal">);`</highlight></codeline>
<codeline lineno="135"><highlight class="normal">-<sp/>`ros::Subscriber<sp/>pb_sub<sp/>=<sp/>n.subscribe(</highlight><highlight class="stringliteral">&quot;chatter&quot;</highlight><highlight class="normal">,<sp/>1000,<sp/>MessageCallback);`<sp/>--&gt;<sp/>`</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>listener<sp/>=</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listener_node-&gt;CreateReader(</highlight><highlight class="stringliteral">&quot;channel/chatter&quot;</highlight><highlight class="normal">,<sp/>MessageCallback);`</highlight></codeline>
<codeline lineno="137"><highlight class="normal">-<sp/>`ros::spin();`<sp/>--&gt;<sp/>`<ref refid="namespaceapollo_1_1cyber_1a7929114e78a9c595b0ee715968ca2712" kindref="member">apollo::cyber::WaitForShutdown</ref>();`</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">Note:<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>Cyber-RT,<sp/>a<sp/>listener<sp/>node<sp/>has<sp/>to<sp/>use<sp/>`node-&gt;CreateReader&lt;messageType&gt;(channelName,<sp/>callback)`<sp/>to<sp/>read<sp/>data<sp/>from<sp/>channel.</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">###<sp/>Talker</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">Cyber-RT</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">```C</highlight></codeline>
<codeline lineno="146"><highlight class="normal">#include<sp/></highlight><highlight class="stringliteral">&quot;cyber/cyber.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">#include<sp/></highlight><highlight class="stringliteral">&quot;cyber/examples/proto/examples.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>apollo::cyber::examples::proto::Chatter;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>cyber<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="namespaceapollo_1_1cyber_1a2d055a81b338116634deaf8ac3367aca" kindref="member">apollo::cyber::Init</ref>(argv[0]);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>talker<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>talker_node<sp/>=<sp/><ref refid="namespaceapollo_1_1cyber_1ae369c5de0279f2a5745d0438d532bc89" kindref="member">apollo::cyber::CreateNode</ref>(</highlight><highlight class="stringliteral">&quot;talker&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>talker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>talker<sp/>=<sp/>talker_node-&gt;CreateWriter&lt;Chatter&gt;(</highlight><highlight class="stringliteral">&quot;channel/chatter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>Rate<sp/>rate(1.0);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="namespaceapollo_1_1cyber_1aafa5f9962b51918897897bbc0fdd802f" kindref="member">apollo::cyber::OK</ref>())<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint64_t<sp/>seq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/>std::make_shared&lt;Chatter&gt;();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;set_timestamp(Time::Now().ToNanosecond());</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;set_lidar_timestamp(Time::Now().ToNanosecond());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;set_seq(seq++);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;set_content(</highlight><highlight class="stringliteral">&quot;Hello,<sp/>apollo!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>talker-&gt;Write(msg);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="log_8h_1af1a972c64154fbc2f9b56766c89add01" kindref="member">AINFO</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;talker<sp/>sent<sp/>a<sp/>message!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>rate.Sleep();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">```<sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">ROS</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">```c</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ros/ros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chatter.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;talker&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>n;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>ros::Publisher<sp/>chatter_pub<sp/>=<sp/>n.advertise&lt;pb_msgs::Chatter&gt;(</highlight><highlight class="stringliteral">&quot;chatter&quot;</highlight><highlight class="normal">,<sp/>1000);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>ros::Rate<sp/>loop_rate(10);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ros::ok())<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_msgs::Chatter<sp/>msg;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::Time<sp/>now<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.mutable_stamp()-&gt;set_sec(now.sec);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.mutable_stamp()-&gt;set_nsec(now.nsec);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>world<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.set_content(ss.str());</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>chatter_pub.publish(msg);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::spinOnce();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>loop_rate.sleep();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal">```</highlight></codeline>
<codeline lineno="203"><highlight class="normal">Most<sp/>of<sp/>the<sp/>mappings<sp/>are<sp/>illustrated<sp/>in<sp/>listener<sp/>code<sp/>above,<sp/>the<sp/>rest<sp/>are<sp/>listed<sp/>here.<sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">-<sp/>`ros::Publisher<sp/>chatter_pub<sp/>=<sp/>n.advertise&lt;pb_msgs::Chatter&gt;(</highlight><highlight class="stringliteral">&quot;chatter&quot;</highlight><highlight class="normal">,<sp/>1000);`<sp/>--&gt;<sp/>`</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>talker<sp/>=<sp/>talker_node-&gt;CreateWriter&lt;Chatter&gt;(</highlight><highlight class="stringliteral">&quot;channel/chatter&quot;</highlight><highlight class="normal">);`</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">-<sp/>`chatter_pub.publish(msg);`<sp/>--&gt;<sp/>`<sp/>talker-&gt;Write(msg);`</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>Tools<sp/>mapping</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"></highlight><highlight class="normal">ROS<sp/>|<sp/>Cyber-RT<sp/>|<sp/>Note</highlight></codeline>
<codeline lineno="212"><highlight class="normal">-------------<sp/>|<sp/>-------------<sp/>|<sp/>--------------</highlight></codeline>
<codeline lineno="213"><highlight class="normal">rosbag<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>cyber_recorder<sp/>|<sp/><sp/><sp/>data<sp/>file</highlight></codeline>
<codeline lineno="214"><highlight class="normal">scripts/diagnostics.sh<sp/>|<sp/>cyber_monitor<sp/>|<sp/>channel<sp/>debug</highlight></codeline>
<codeline lineno="215"><highlight class="normal">offline_lidar_visualizer_tool<sp/><sp/><sp/>|<sp/>cyber_visualizer<sp/>|point<sp/>cloud<sp/>visualizer</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>ROS<sp/>bag<sp/>data<sp/>migration<sp/></highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">The<sp/>data<sp/>file<sp/>changed<sp/>from<sp/>ROS<sp/>bag<sp/>to<sp/>Cyber<sp/>record<sp/>in<sp/>Cyber-RT.<sp/>Cyber-RT<sp/>has<sp/>a<sp/>data<sp/>migration<sp/>tool<sp/>`rosbag_to_record`<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>users<sp/>to<sp/>easily<sp/>migrate<sp/>data<sp/>files<sp/>before<sp/>Apollo<sp/>3.0<sp/>(ROS)<sp/>to<sp/>Cyber-RT<sp/>like<sp/>the<sp/>sample<sp/>usage<sp/>below.<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">```bash</highlight></codeline>
<codeline lineno="222"><highlight class="normal">rosbag_to_record<sp/>demo_3.0.bag<sp/>demo_3.5.record</highlight></codeline>
<codeline lineno="223"><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="/home/work/apollo-fork/apollo/cyber/docs/CyberRT_Migration_Guide.md"/>
  </compounddef>
</doxygen>
