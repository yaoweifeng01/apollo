<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="CyberRT__Quick__Start__cn_8md" kind="file">
    <compoundname>CyberRT_Quick_Start_cn.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>如何使用Cyber<sp/>RT来创建一个新的组件</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">Apollo<sp/>Cyber<sp/>运行时框架(Apollo<sp/>Cyber<sp/>RT<sp/>Framework)<sp/>是基于组件概念来构建的.<sp/>每个组件都是Cyber框架的一个构建块,<sp/>它包括一个特定的算法模块，<sp/>此算法模块处理一组输入数椐并产生一组输出数椐。</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal">要创建并启动一个算法组件,<sp/>需要通过以下4个步骤:</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">-<sp/>初如化组件的文件结构</highlight></codeline>
<codeline lineno="9"><highlight class="normal">-<sp/>实现组件类</highlight></codeline>
<codeline lineno="10"><highlight class="normal">-<sp/>设置配置文件<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal">-<sp/>启动组件</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">下面的例子展示了如何创建，编译，运行一个组件，并观察组件在屏幕上的输出。<sp/>如果想更深入的探索Apollo<sp/>Cyber<sp/>RT框架,<sp/>可以在这个目录`/apollo/cyber/examples/`找到很多例子，这些例子详细展示了如何使用Cyber框架的各种功能。</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">*Note:<sp/>这些例子必须运行在Apollo<sp/>docker环境，<sp/>且需要通过Bazel来编译.*</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>初始化组件文件结构</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal">例如组件的根目录为`/apollo/cyber/examples/common_component_example/`需要创建以下文件:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">-<sp/>Header<sp/>file:<sp/>common_component_example.h</highlight></codeline>
<codeline lineno="22"><highlight class="normal">-<sp/>Source<sp/>file:<sp/>common_component_example.cc</highlight></codeline>
<codeline lineno="23"><highlight class="normal">-<sp/>Build<sp/>file:<sp/>BUILD</highlight></codeline>
<codeline lineno="24"><highlight class="normal">-<sp/>DAG<sp/>dependency<sp/>file:<sp/>common.dag</highlight></codeline>
<codeline lineno="25"><highlight class="normal">-<sp/>Launch<sp/>file:<sp/>common.launch</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>实现组件类</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>实现组件头文件</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal">如何实现`common_component_example.h`:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">-<sp/>继承<sp/>Component<sp/>类</highlight></codeline>
<codeline lineno="33"><highlight class="normal">-<sp/>定义自己的<sp/>`<ref refid="namespaceapollo_1_1cyber_1a2d055a81b338116634deaf8ac3367aca" kindref="member">Init</ref>`<sp/>和<sp/>`Proc`<sp/>函数.<sp/>Proc<sp/>需要指定输入数椐类型。</highlight></codeline>
<codeline lineno="34"><highlight class="normal">-<sp/>使用`<ref refid="component_8h_1a031103527dc7f59a627459d635de10f8" kindref="member">CYBER_REGISTER_COMPONENT</ref>`宏定义把组件类注册成全局可用。</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">```cpp</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="class__loader_8h" kindref="compound">cyber/class_loader/class_loader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="component_8h" kindref="compound">cyber/component/component.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/examples/proto/examples.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>apollo::cyber::examples::proto::Driver;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1Component" kindref="compound">apollo::cyber::Component</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1ComponentBase" kindref="compound">apollo::cyber::ComponentBase</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classCommonComponentSample" kindref="compound">CommonComponentSample</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1Component_1a37ccb4740d819327ac929b703d8cf9ae" kindref="member">Component</ref>&lt;Driver,<sp/>Driver&gt;<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommonComponentSample_1ae2a3f8c8ce4b9cfd9c6b357628bc84ee" kindref="member">Init</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommonComponentSample_1ab84ea2f74b8ab92a74733b392319ea5e" kindref="member">Proc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg0,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg1)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="component_8h_1a031103527dc7f59a627459d635de10f8" kindref="member">CYBER_REGISTER_COMPONENT</ref>(<ref refid="classCommonComponentSample" kindref="compound">CommonComponentSample</ref>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">```</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>实现组件源文件</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">对于源文件<sp/>`common_component_example.cc`,<sp/><sp/>`<ref refid="namespaceapollo_1_1cyber_1a2d055a81b338116634deaf8ac3367aca" kindref="member">Init</ref>`<sp/>和<sp/>`Proc`<sp/>这两个函数需要实现.</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">```cpp</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common__component__example_8h" kindref="compound">cyber/examples/common_component_example/common_component_example.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="class__loader_8h" kindref="compound">cyber/class_loader/class_loader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="component_8h" kindref="compound">cyber/component/component.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommonComponentSample_1ae2a3f8c8ce4b9cfd9c6b357628bc84ee" kindref="member">CommonComponentSample::Init</ref>()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="log_8h_1af1a972c64154fbc2f9b56766c89add01" kindref="member">AINFO</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Commontest<sp/>component<sp/>init&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommonComponentSample_1ab84ea2f74b8ab92a74733b392319ea5e" kindref="member">CommonComponentSample::Proc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg0,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg1)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="log_8h_1af1a972c64154fbc2f9b56766c89add01" kindref="member">AINFO</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>common<sp/>component<sp/>Proc<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg0-&gt;msg_id()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>msg1-&gt;msg_id()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">```</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>创建BUILD编译文件</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">创建<sp/>bazel<sp/>BUILD<sp/>文件.</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">```bash</highlight></codeline>
<codeline lineno="83"><highlight class="normal">load(</highlight><highlight class="stringliteral">&quot;//tools:cpplint.bzl&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cpplint&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">package(default_visibility<sp/>=<sp/>[&quot;</highlight><highlight class="comment">//visibility:public&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">cc_binary(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;libcommon_component_example.so&quot;,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>deps<sp/>=<sp/>[&quot;:common_component_example_lib&quot;],</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>linkopts<sp/>=<sp/>[&quot;-shared&quot;],</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>linkstatic<sp/>=<sp/>False,</highlight></codeline>
<codeline lineno="92"><highlight class="normal">)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">cc_library(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;common_component_example_lib&quot;,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>srcs<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;common_component_example.cc&quot;,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>hdrs<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;common_component_example.h&quot;,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>deps<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="comment">//cyber&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="comment">//cyber/examples/proto:examples_cc_proto&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="106"><highlight class="normal">)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">cpplint()</highlight></codeline>
<codeline lineno="109"><highlight class="normal">```</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>设置配置文件<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>配置DAG依赖文件</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">在DAG依赖配置文件<sp/>(例如common.dag)中配置下面的项:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/>-<sp/>Channel<sp/>names:<sp/>输入输出数椐的Channel名字</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/>-<sp/>Library<sp/>path:<sp/>此组件最终编译出的库的名字</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/>-<sp/>Class<sp/>name:<sp/>此组件的入口类的名字</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">```bash</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Define<sp/>all<sp/>coms<sp/>in<sp/>DAG<sp/>streaming.</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>component_config<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>component_library<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;/apollo/bazel-bin/cyber/examples/common_component_example/libcommon_component_example.so&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>components<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_name<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;CommonComponentSample&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;common&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readers<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel:<sp/></highlight><highlight class="stringliteral">&quot;/apollo/prediction&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readers<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel:<sp/></highlight><highlight class="stringliteral">&quot;/apollo/test&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">```</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>配置launch启动文件</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">在launch启动文件中(common.launch),<sp/>配置下面的项:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>-<sp/>组件的名字</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>-<sp/>上一步创建的dag配置的名字。</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>-<sp/>组件运行时所在的进程目录。</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">```bash</highlight></codeline>
<codeline lineno="148"><highlight class="normal">&lt;cyber&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;component&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;name&gt;common&lt;/name&gt;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;dag_conf&gt;/apollo/cyber/examples/common_component_example/common.dag&lt;/dag_conf&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;process_name&gt;common&lt;/process_name&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/component&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">&lt;/cyber&gt;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">```</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>启动这个组件</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">通过下面的命令来编译组件:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">```bash</highlight></codeline>
<codeline lineno="162"><highlight class="normal">bash<sp/>/apollo/apollo.sh<sp/>build</highlight></codeline>
<codeline lineno="163"><highlight class="normal">```</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">Note:<sp/>确定组件正常编译成功</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">然后配置环境:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">```bash</highlight></codeline>
<codeline lineno="170"><highlight class="normal">cd<sp/>/apollo/cyber</highlight></codeline>
<codeline lineno="171"><highlight class="normal">source<sp/>setup.bash</highlight></codeline>
<codeline lineno="172"><highlight class="normal">```</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">有两种方法来启动组件:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">-<sp/>使用launch文件来启动<sp/>(推荐这种方式)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">```bash</highlight></codeline>
<codeline lineno="179"><highlight class="normal">cyber_launch<sp/>start<sp/>/apollo/cyber/examples/common_component_example/common.launch</highlight></codeline>
<codeline lineno="180"><highlight class="normal">```</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">-<sp/>使用dag文件来启动</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">```bash</highlight></codeline>
<codeline lineno="185"><highlight class="normal">mainboard<sp/>-d<sp/>/apollo/cyber/examples/common_component_example/common.dag</highlight></codeline>
<codeline lineno="186"><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="/home/work/apollo-fork/apollo/cyber/docs/CyberRT_Quick_Start_cn.md"/>
  </compounddef>
</doxygen>
