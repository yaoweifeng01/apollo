<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="CyberRT__API__for__Developers_8md" kind="file">
    <compoundname>CyberRT_API_for_Developers.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#<sp/>Cyber<sp/>RT<sp/>API<sp/>for<sp/>Developers</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">This<sp/>document<sp/>provides<sp/>an<sp/>extensive<sp/>technical<sp/>deep<sp/>dive<sp/>into<sp/>how<sp/>to<sp/>create,<sp/>manipulate<sp/>and<sp/>use<sp/>Cyber<sp/>RT</highlight><highlight class="stringliteral">&apos;s<sp/>API.</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">##<sp/>Table<sp/>of<sp/>Contents</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral">-<sp/>[Talker-Listener](#Talker-Listener)</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral">-<sp/>[Service<sp/>Creation<sp/>and<sp/>Use](#Service-Creation-and-Use)</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">-<sp/>[Param<sp/>parameter<sp/>service](#Param-parameter-service)</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral">-<sp/>[Log<sp/>API](#LOG-API)</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral">-<sp/>[Building<sp/>a<sp/>module<sp/>based<sp/>on<sp/>Component](#Building-a-module-based-on-Component)</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral">-<sp/>[Launch](#Launch)</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral">-<sp/>[Timer](#timer)</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral">-<sp/>[Time<sp/>API](#use-of-time)</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral">-<sp/>[Record<sp/>file:<sp/>Read<sp/>and<sp/>Write](#Record-file-Read-and-Write)</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral">-<sp/>[C++<sp/>API<sp/>Directory](##API-Directory)</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>[Node](#node-api)</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>[Writer](#writer-api)</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>[Client](#client-api)</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>[Parameter](#parameter-api)</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>[Timer](#timer-api)</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>[Time](#timer-api)</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>[Duration](#duration-api)</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>[Rate](#rate-api)</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>[RecordReader](#recordreader-api)</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>[RecordWriter](#recordwriter-api)</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">##<sp/>Talker-Listener</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral">The<sp/>first<sp/>part<sp/>of<sp/>demonstrating<sp/>CyberRT<sp/>API<sp/>is<sp/>to<sp/>understand<sp/>the<sp/>Talker/Listener<sp/>example.<sp/>Following<sp/>are<sp/>three<sp/>essential<sp/>concepts:<sp/>node<sp/>(basic<sp/>unit),<sp/>reader(facility<sp/>to<sp/>read<sp/>message)<sp/>and<sp/>writer(facility<sp/>to<sp/>write<sp/>message)<sp/>of<sp/>the<sp/>example.</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral">###<sp/>Create<sp/>a<sp/>node</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">In<sp/>the<sp/>CyberRT<sp/>framework,<sp/>the<sp/>node<sp/>is<sp/>the<sp/>most<sp/>fundamental<sp/>unit,<sp/>similar<sp/>to<sp/>the<sp/>role<sp/>of<sp/>a<sp/>`handle`.<sp/>When<sp/>creating<sp/>a<sp/>specific<sp/>functional<sp/>object<sp/>(writer,<sp/>reader,<sp/>etc.),<sp/>you<sp/>need<sp/>to<sp/>create<sp/>it<sp/>based<sp/>on<sp/>an<sp/>existing<sp/>node<sp/>instance.</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral">The<sp/>node<sp/>creation<sp/>interface<sp/>is<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral">std::unique_ptr&lt;Node&gt;<sp/>apollo::cyber::CreateNode(const<sp/>std::string&amp;<sp/>node_name,<sp/>const<sp/>std::string&amp;<sp/>name_space<sp/>=<sp/>&quot;&quot;);</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral">-<sp/>Parameters:</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>node_name:<sp/>name<sp/>of<sp/>the<sp/>node,<sp/>globally<sp/>unique<sp/>identifier</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>name_space:<sp/>name<sp/>of<sp/>the<sp/>space<sp/>where<sp/>the<sp/>node<sp/>is<sp/>located<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>```</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>name_space<sp/>is<sp/>empty<sp/>by<sp/>default.<sp/>It<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>space<sp/>concatenated<sp/>with<sp/>node_name.<sp/>The<sp/>format<sp/>is<sp/>/namespace/node_name</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>```</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">-<sp/>Return<sp/>value<sp/>-<sp/>An<sp/>exclusive<sp/>smart<sp/>pointer<sp/>to<sp/>Node</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral">-<sp/>Error<sp/>Conditions<sp/>-<sp/>when<sp/>`cyber::Init()`<sp/>has<sp/>not<sp/>called,<sp/>the<sp/>system<sp/>is<sp/>in<sp/>an<sp/>uninitialized<sp/>state,<sp/>unable<sp/>to<sp/>create<sp/>a<sp/>node,<sp/>return<sp/>nullptr</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral">###<sp/>Create<sp/>a<sp/>writer</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral">The<sp/>writer<sp/>is<sp/>the<sp/>basic<sp/>facility<sp/>used<sp/>in<sp/>CyberRT<sp/>to<sp/>send<sp/>messages.<sp/>Every<sp/>writer<sp/>corresponds<sp/>to<sp/>a<sp/>channel<sp/>with<sp/>a<sp/>specific<sp/>data<sp/>type.</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral">The<sp/>writer<sp/>is<sp/>created<sp/>by<sp/>the<sp/>`CreateWriter`<sp/>interface<sp/>in<sp/>the<sp/>node<sp/>class.<sp/>The<sp/>interfaces<sp/>are<sp/>listed<sp/>as<sp/>below:</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral">template<sp/>&lt;typename<sp/>MessageT&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/>auto<sp/>CreateWriter(const<sp/>std::string&amp;<sp/>channel_name)</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;Writer&lt;MessageT&gt;&gt;;</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral">template<sp/>&lt;typename<sp/>MessageT&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/>auto<sp/>CreateWriter(const<sp/>proto::RoleAttributes&amp;<sp/>role_attr)</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;Writer&lt;MessageT&gt;&gt;;</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral">-<sp/>Parameters:</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>channel_name:<sp/>the<sp/>name<sp/>of<sp/>the<sp/>channel<sp/>to<sp/>write<sp/>to</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>MessageT:<sp/>The<sp/>type<sp/>of<sp/>message<sp/>to<sp/>be<sp/>written<sp/>out</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral">-<sp/>Return<sp/>value<sp/>-<sp/>Shared<sp/>pointer<sp/>to<sp/>the<sp/>Writer<sp/>object</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral">###<sp/>Create<sp/>a<sp/>reader</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral">The<sp/>reader<sp/>is<sp/>the<sp/>basic<sp/>facility<sp/>used<sp/>in<sp/>cyber<sp/>to<sp/>receive<sp/>messages.<sp/>Reader<sp/>has<sp/>to<sp/>be<sp/>bound<sp/>to<sp/>a<sp/>callback<sp/>function<sp/>when<sp/>it<sp/>is<sp/>created.<sp/>When<sp/>a<sp/>new<sp/>message<sp/>arrives<sp/>in<sp/>the<sp/>channel,<sp/>the<sp/>callback<sp/>will<sp/>be<sp/>called.</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral">The<sp/>reader<sp/>is<sp/>created<sp/>by<sp/>the<sp/>`CreateReader`<sp/>interface<sp/>of<sp/>the<sp/>node<sp/>class.<sp/>The<sp/>interfaces<sp/>are<sp/>listed<sp/>as<sp/>below:</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>MessageT&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/>auto<sp/>CreateReader(const<sp/>std::string&amp;<sp/>channel_name,<sp/>const<sp/>std::function&lt;void(const<sp/>std::shared_ptr&lt;MessageT&gt;&amp;)&gt;&amp;<sp/>reader_func)</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;Reader&lt;MessageT&gt;&gt;;</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>MessageT&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/>auto<sp/>CreateReader(const<sp/>ReaderConfig&amp;<sp/>config,</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>CallbackFunc&lt;MessageT&gt;&amp;<sp/>reader_func<sp/>=<sp/>nullptr)</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;cyber::Reader&lt;MessageT&gt;&gt;;</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>MessageT&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/>auto<sp/>CreateReader(const<sp/>proto::RoleAttributes&amp;<sp/>role_attr,</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>CallbackFunc&lt;MessageT&gt;&amp;<sp/>reader_func<sp/>=<sp/>nullptr)</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;cyber::Reader&lt;MessageT&gt;&gt;;</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral">-<sp/>Parameters:</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>MessageT:<sp/>The<sp/>type<sp/>of<sp/>message<sp/>to<sp/>read</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>channel_name:<sp/>the<sp/>name<sp/>of<sp/>the<sp/>channel<sp/>to<sp/>receive<sp/>from</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>reader_func:<sp/>callback<sp/>function<sp/>to<sp/>process<sp/>the<sp/>messages</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral">-<sp/>Return<sp/>value<sp/>-<sp/>Shared<sp/>pointer<sp/>to<sp/>the<sp/>Reader<sp/>object</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral">###<sp/>Code<sp/>Example</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral">####<sp/>Talker<sp/>(cyber/examples/talker.cc)</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral">#include<sp/>&quot;cyber/cyber.h&quot;</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral">#include<sp/>&quot;cyber/proto/chatter.pb.h&quot;</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral">#include<sp/>&quot;cyber/time/rate.h&quot;</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral">#include<sp/>&quot;cyber/time/time.h&quot;</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral">using<sp/>apollo::cyber::Rate;</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral">using<sp/>apollo::cyber::Time;</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral">using<sp/>apollo::cyber::proto::Chatter;</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral">int<sp/>main(int<sp/>argc,<sp/>char<sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/>//<sp/>init<sp/>cyber<sp/>framework</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/>apollo::cyber::Init(argv[0]);</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/>//<sp/>create<sp/>talker<sp/>node</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/>std::shared_ptr&lt;apollo::cyber::Node&gt;<sp/>talker_node(</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>apollo::cyber::CreateNode(&quot;talker&quot;));</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/>//<sp/>create<sp/>talker</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/>auto<sp/>talker<sp/>=<sp/>talker_node-&gt;CreateWriter&lt;Chatter&gt;(&quot;channel/chatter&quot;);</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/>Rate<sp/>rate(1.0);</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/>while<sp/>(apollo::cyber::OK())<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>static<sp/>uint64_t<sp/>seq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>msg<sp/>=<sp/>std::make_shared&lt;apollo::cyber::proto::Chatter&gt;();</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>msg-&gt;set_timestamp(Time::Now().ToNanosecond());</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>msg-&gt;set_lidar_timestamp(Time::Now().ToNanosecond());</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>msg-&gt;set_seq(seq++);</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>msg-&gt;set_content(&quot;Hello,<sp/>apollo!&quot;);</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>talker-&gt;Write(msg);</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;talker<sp/>sent<sp/>a<sp/>message!&quot;;</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>rate.Sleep();</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral">####<sp/>Listener<sp/>(cyber/examples/listener.cc)</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral">#include<sp/>&quot;cyber/cyber.h&quot;</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral">#include<sp/>&quot;cyber/proto/chatter.pb.h&quot;</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral">void<sp/>MessageCallback(</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>std::shared_ptr&lt;apollo::cyber::proto::Chatter&gt;&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;Received<sp/>message<sp/>seq-&gt;<sp/>&quot;<sp/>&lt;&lt;<sp/>msg-&gt;seq();</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;msgcontent-&gt;&quot;<sp/>&lt;&lt;<sp/>msg-&gt;content();</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral">int<sp/>main(int<sp/>argc,<sp/>char<sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/>//<sp/>init<sp/>cyber<sp/>framework</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/>apollo::cyber::Init(argv[0]);<sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/>//<sp/>create<sp/>listener<sp/>node</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/>auto<sp/>listener_node<sp/>=<sp/>apollo::cyber::CreateNode(&quot;listener&quot;);</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/>//<sp/>create<sp/>listener</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/>auto<sp/>listener<sp/>=</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>listener_node-&gt;CreateReader&lt;apollo::cyber::proto::Chatter&gt;(</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;channel/chatter&quot;,<sp/>MessageCallback);</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/>apollo::cyber::WaitForShutdown();</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral">####<sp/>Bazel<sp/>BUILD<sp/>file(cyber/samples/BUILD)</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral">```bazel<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral">cc_binary(</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;talker&quot;,</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>srcs<sp/>=<sp/>[<sp/>&quot;talker.cc&quot;,<sp/>],</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>deps<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;//cyber&quot;,</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;//cyber/examples/proto:examples_cc_proto&quot;,</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral">cc_binary(</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;listener&quot;,</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>srcs<sp/>=<sp/>[<sp/>&quot;listener.cc&quot;,<sp/>],</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>deps<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;//cyber&quot;,</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;//cyber/examples/proto:examples_cc_proto&quot;,</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral">####<sp/>Build<sp/>and<sp/>Run</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral">-<sp/>Build:<sp/>bazel<sp/>build<sp/>cyber/examples/…</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral">-<sp/>Run<sp/>talker/listener<sp/>in<sp/>different<sp/>terminals:<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>./bazel-bin/cyber/examples/talker</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>./bazel-bin/cyber/examples/listener</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral">-<sp/>Examine<sp/>the<sp/>results:<sp/>you<sp/>should<sp/>see<sp/>message<sp/>printing<sp/>out<sp/>on<sp/>listener.<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral">##<sp/>Service<sp/>Creation<sp/>and<sp/>Use</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral">###<sp/>Introduction</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral">In<sp/>an<sp/>autonomous<sp/>driving<sp/>system,<sp/>there<sp/>are<sp/>many<sp/>scenarios<sp/>that<sp/>require<sp/>more<sp/>from<sp/>module<sp/>communication<sp/>than<sp/>just<sp/>sending<sp/>or<sp/>receiving<sp/>messages.<sp/>Service<sp/>is<sp/>another<sp/>way<sp/>of<sp/>communication<sp/>between<sp/>nodes.<sp/>Unlike<sp/>channel,<sp/>service<sp/>implements<sp/>`two-way`<sp/>communication,<sp/>e.g.<sp/>a<sp/>node<sp/>obtains<sp/>a<sp/>response<sp/>by<sp/>sending<sp/>a<sp/>request.<sp/>This<sp/>section<sp/>introduces<sp/>the<sp/>`service`<sp/>module<sp/>in<sp/>CyberRT<sp/>API<sp/>with<sp/>examples.</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral">###<sp/>Demo<sp/>-<sp/>Example</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral">Problem:<sp/>create<sp/>a<sp/>client-server<sp/>model<sp/>that<sp/>pass<sp/>Driver.proto<sp/>back<sp/>and<sp/>forth.</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral">When<sp/>a<sp/>request<sp/>is<sp/>sent<sp/>in<sp/>by<sp/>the<sp/>client,<sp/>the<sp/>server<sp/>parses/processes<sp/>the<sp/>request<sp/>and<sp/>returns<sp/>the<sp/>response.</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral">The<sp/>implementation<sp/>of<sp/>the<sp/>demo<sp/>mainly<sp/>includes<sp/>the<sp/>following<sp/>steps.</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral">####<sp/>Define<sp/>request<sp/>and<sp/>response<sp/>messages</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral">All<sp/>messages<sp/>in<sp/>cyber<sp/>are<sp/>in<sp/>the<sp/>`protobuf`<sp/>format.<sp/>Any<sp/>protobuf<sp/>message<sp/>with<sp/>serialize/deserialize<sp/>interfaces<sp/>can<sp/>be<sp/>used<sp/>as<sp/>the<sp/>service<sp/>request<sp/>and<sp/>response<sp/>message.<sp/>`Driver`<sp/>in<sp/>examples.proto<sp/>is<sp/>used<sp/>as<sp/>service<sp/>request<sp/>and<sp/>response<sp/>in<sp/>this<sp/>example:</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral">```protobuf</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral">//<sp/>filename:<sp/>examples.proto</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral">syntax<sp/>=<sp/>&quot;proto2&quot;;</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral">package<sp/>apollo.cyber.examples.proto;</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral">message<sp/>Driver<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>optional<sp/>string<sp/>content<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>optional<sp/>uint64<sp/>msg_id<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>optional<sp/>uint64<sp/>timestamp<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral">####<sp/>Create<sp/>a<sp/>service<sp/>and<sp/>a<sp/>client</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral">```c</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral">//<sp/>filename:<sp/>cyber/examples/service.cc</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral">#include<sp/>&quot;cyber/cyber.h&quot;</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral">#include<sp/>&quot;cyber/examples/proto/examples.pb.h&quot;</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral">using<sp/>apollo::cyber::examples::proto::Driver;</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral">int<sp/>main(int<sp/>argc,<sp/>char*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/>apollo::cyber::Init(argv[0]);</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/>std::shared_ptr&lt;apollo::cyber::Node&gt;<sp/>node(</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>apollo::cyber::CreateNode(&quot;start_node&quot;));</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/>auto<sp/>server<sp/>=<sp/>node-&gt;CreateService&lt;Driver,<sp/>Driver&gt;(</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;test_server&quot;,<sp/>[](const<sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>request,</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>response)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;server:<sp/>I<sp/>am<sp/>driver<sp/>server&quot;;</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>uint64_t<sp/>id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++id;</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response-&gt;set_msg_id(id);</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response-&gt;set_timestamp(0);</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/></highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/>auto<sp/>client<sp/>=<sp/>node-&gt;CreateClient&lt;Driver,<sp/>Driver&gt;(&quot;test_server&quot;);</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/>auto<sp/>driver_msg<sp/>=<sp/>std::make_shared&lt;Driver&gt;();</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"><sp/><sp/>driver_msg-&gt;set_msg_id(0);</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"><sp/><sp/>driver_msg-&gt;set_timestamp(0);</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/>while<sp/>(apollo::cyber::OK())<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>res<sp/>=<sp/>client-&gt;SendRequest(driver_msg);</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(res<sp/>!=<sp/>nullptr)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;client:<sp/>responese:<sp/>&quot;<sp/>&lt;&lt;<sp/>res-&gt;ShortDebugString();</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;client:<sp/>service<sp/>may<sp/>not<sp/>ready.&quot;;</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sleep(1);</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/>apollo::cyber::WaitForShutdown();</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral">####<sp/>Bazel<sp/>build<sp/>file</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral">```bazel</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral">cc_binary(</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;service&quot;,</highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>srcs<sp/>=<sp/>[<sp/>&quot;service.cc&quot;,<sp/>],</highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>deps<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;//cyber&quot;,</highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;//cyber/examples/proto:examples_cc_proto&quot;,</highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral">####<sp/>Build<sp/>and<sp/>run</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral">-<sp/>Build<sp/>service/client:<sp/>bazel<sp/>build<sp/>cyber/examples/…</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral">-<sp/>Run:<sp/>./bazel-bin/cyber/examples/service</highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral">-<sp/>Examining<sp/>result:<sp/>you<sp/>should<sp/>see<sp/>content<sp/>below<sp/>in<sp/>apollo/data/log/service.INFO<sp/></highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral">```<sp/></highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral">I1124<sp/>16:36:44.568845<sp/>14965<sp/>service.cc:30]<sp/>[service]<sp/>server:<sp/>i<sp/>am<sp/>driver<sp/>server</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral">I1124<sp/>16:36:44.569031<sp/>14949<sp/>service.cc:43]<sp/>[service]<sp/>client:<sp/>responese:<sp/>msg_id:<sp/>1<sp/>timestamp:<sp/>0</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral">I1124<sp/>16:36:45.569514<sp/>14966<sp/>service.cc:30]<sp/>[service]<sp/>server:<sp/>i<sp/>am<sp/>driver<sp/>server</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral">I1124<sp/>16:36:45.569932<sp/>14949<sp/>service.cc:43]<sp/>[service]<sp/>client:<sp/>responese:<sp/>msg_id:<sp/>2<sp/>timestamp:<sp/>0</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral">I1124<sp/>16:36:46.570627<sp/>14967<sp/>service.cc:30]<sp/>[service]<sp/>server:<sp/>i<sp/>am<sp/>driver<sp/>server</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral">I1124<sp/>16:36:46.571024<sp/>14949<sp/>service.cc:43]<sp/>[service]<sp/>client:<sp/>responese:<sp/>msg_id:<sp/>3<sp/>timestamp:<sp/>0</highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral">I1124<sp/>16:36:47.571566<sp/>14968<sp/>service.cc:30]<sp/>[service]<sp/>server:<sp/>i<sp/>am<sp/>driver<sp/>server</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral">I1124<sp/>16:36:47.571962<sp/>14949<sp/>service.cc:43]<sp/>[service]<sp/>client:<sp/>responese:<sp/>msg_id:<sp/>4<sp/>timestamp:<sp/>0</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral">I1124<sp/>16:36:48.572634<sp/>14969<sp/>service.cc:30]<sp/>[service]<sp/>server:<sp/>i<sp/>am<sp/>driver<sp/>server</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral">I1124<sp/>16:36:48.573030<sp/>14949<sp/>service.cc:43]<sp/>[service]<sp/>client:<sp/>responese:<sp/>msg_id:<sp/>5<sp/>timestamp:<sp/>0</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral">###<sp/>Precautions</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral">-<sp/>When<sp/>registering<sp/>a<sp/>service,<sp/>note<sp/>that<sp/>duplicate<sp/>service<sp/>names<sp/>are<sp/>not<sp/>allowed</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral">-<sp/>The<sp/>node<sp/>name<sp/>applied<sp/>when<sp/>registering<sp/>the<sp/>server<sp/>and<sp/>client<sp/>should<sp/>not<sp/>be<sp/>duplicated<sp/>either</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral">##<sp/>Parameter<sp/>Service</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral">The<sp/>Parameter<sp/>Service<sp/>is<sp/>used<sp/>for<sp/>shared<sp/>data<sp/>between<sp/>nodes,<sp/>and<sp/>provides<sp/>basic<sp/>operations<sp/>such<sp/>as<sp/>`set`,<sp/>`get`,<sp/>and<sp/>`list`.<sp/>The<sp/>Parameter<sp/>Service<sp/>is<sp/>based<sp/>on<sp/>the<sp/>`Service`<sp/>implementation<sp/>and<sp/>contains<sp/>service<sp/>and<sp/>client.</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral">###<sp/>Parameter<sp/>Object</highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral">####<sp/>Supported<sp/>Data<sp/>types</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral">All<sp/>parameters<sp/>passed<sp/>through<sp/>cyber<sp/>are<sp/>`apollo::cyber::Parameter`<sp/>objects,<sp/>the<sp/>table<sp/>below<sp/>lists<sp/>the<sp/>5<sp/>supported<sp/>parameter<sp/>types.<sp/><sp/></highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral">Parameter<sp/>type<sp/>|<sp/>C++<sp/>data<sp/>type<sp/>|<sp/>protobuf<sp/>data<sp/>type</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral">-------------<sp/>|<sp/>-------------<sp/>|<sp/>--------------</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral">apollo::cyber::proto::ParamType::INT<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>int64_t<sp/>|<sp/><sp/><sp/>int64</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral">apollo::cyber::proto::ParamType::DOUBLE<sp/>|<sp/>double<sp/>|<sp/>double</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral">apollo::cyber::proto::ParamType::BOOL<sp/><sp/><sp/>|<sp/>bool<sp/>|bool</highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral">apollo::cyber::proto::ParamType::STRING<sp/><sp/>|<sp/>std::string<sp/>|<sp/>string</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral">apollo::cyber::proto::ParamType::PROTOBUF<sp/><sp/>|<sp/>std::string<sp/>|<sp/>string</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral">apollo::cyber::proto::ParamType::NOT_SET<sp/>|<sp/>-<sp/>|<sp/>-<sp/></highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral">Besides<sp/>the<sp/>5<sp/>types<sp/>above,<sp/>Parameter<sp/>also<sp/>supports<sp/>interface<sp/>with<sp/>protobuf<sp/>object<sp/>as<sp/>incoming<sp/>parameter.<sp/>Post<sp/>performing<sp/>serialization<sp/>processes<sp/>the<sp/>object<sp/>and<sp/>converts<sp/>it<sp/>to<sp/>the<sp/>STRING<sp/>type<sp/>for<sp/>transfer.</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral">####<sp/>Creating<sp/>the<sp/>Parameter<sp/>Object</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral">Supported<sp/>constructors:</highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral"><sp/><sp/>Parameter();<sp/><sp/>//<sp/>Name<sp/>is<sp/>empty,<sp/>type<sp/>is<sp/>NOT_SET</highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral"><sp/><sp/>explicit<sp/>Parameter(const<sp/>Parameter&amp;<sp/>parameter);</highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral"><sp/><sp/>explicit<sp/>Parameter(const<sp/>std::string&amp;<sp/>name);<sp/><sp/>//<sp/>type为NOT_SET</highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>bool<sp/>bool_value);<sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>int<sp/>int_value);</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>int64_t<sp/>int_value);</highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>float<sp/>double_value);</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>double<sp/>double_value);</highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>std::string&amp;<sp/>string_value);</highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>char*<sp/>string_value);</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>std::string&amp;<sp/>msg_str,</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>full_name,<sp/>const<sp/>std::string&amp;<sp/>proto_desc);</highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>google::protobuf::Message&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/>Sample<sp/>code<sp/>of<sp/>using<sp/>Parameter<sp/>object:</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"><sp/><sp/>```C</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"><sp/><sp/>Parameter<sp/>a(&quot;int&quot;,<sp/>10);</highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"><sp/><sp/>Parameter<sp/>b(&quot;bool&quot;,<sp/>true);</highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"><sp/><sp/>Parameter<sp/>c(&quot;double&quot;,<sp/>0.1);</highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/>Parameter<sp/>d(&quot;string&quot;,<sp/>&quot;cyber&quot;);</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/><sp/>Parameter<sp/>e(&quot;string&quot;,<sp/>std::string(&quot;cyber&quot;));</highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral"><sp/><sp/>//<sp/>proto<sp/>message<sp/>Chatter</highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral"><sp/><sp/>Chatter<sp/>chatter;</highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"><sp/><sp/>Parameter<sp/>f(&quot;chatter&quot;,<sp/>chatter);</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral"><sp/><sp/>std::string<sp/>msg_str(&quot;&quot;);</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"><sp/><sp/>chatter.SerializeToString(&amp;msg_str);</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"><sp/><sp/>std::string<sp/>msg_desc(&quot;&quot;);</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/>ProtobufFactory::GetDescriptorString(chatter,<sp/>&amp;msg_desc);</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"><sp/><sp/>Parameter<sp/>g(&quot;chatter&quot;,<sp/>msg_str,<sp/>Chatter::descriptor()-&gt;full_name(),<sp/>msg_desc);</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral"><sp/><sp/>```</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral">####<sp/>Interface<sp/>and<sp/>Data<sp/>Reading</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral">Interface<sp/>list:</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"><sp/><sp/>inline<sp/>ParamType<sp/>type()<sp/>const;</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral"><sp/><sp/>inline<sp/>std::string<sp/>TypeName()<sp/>const;</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"><sp/><sp/>inline<sp/>std::string<sp/>Descriptor()<sp/>const;</highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral"><sp/><sp/>inline<sp/>const<sp/>std::string<sp/>Name()<sp/>const;</highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"><sp/><sp/>inline<sp/>bool<sp/>AsBool()<sp/>const;</highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/>inline<sp/>int64_t<sp/>AsInt64()<sp/>const;</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/>inline<sp/>double<sp/>AsDouble()<sp/>const;</highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"><sp/><sp/>inline<sp/>const<sp/>std::string<sp/>AsString()<sp/>const;</highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral"><sp/><sp/>std::string<sp/>DebugString()<sp/>const;</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral"><sp/><sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_base_of&lt;google::protobuf::Message,<sp/>Type&gt;::value,<sp/>Type&gt;::type</highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral"><sp/><sp/>value()<sp/>const;</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"><sp/><sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral"><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_integral&lt;Type&gt;::value<sp/>&amp;&amp;<sp/>!std::is_same&lt;Type,<sp/>bool&gt;::value,<sp/>Type&gt;::type</highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"><sp/><sp/>value()<sp/>const;</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"><sp/><sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_floating_point&lt;Type&gt;::value,<sp/>Type&gt;::type</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral"><sp/><sp/>value()<sp/>const;</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_convertible&lt;Type,<sp/>std::string&gt;::value,<sp/>const<sp/>std::string&amp;&gt;::type</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"><sp/><sp/>value()<sp/>const;</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_same&lt;Type,<sp/>bool&gt;::value,<sp/>bool&gt;::type<sp/></highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"><sp/><sp/>value()<sp/>const;</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral">An<sp/>example<sp/>of<sp/>how<sp/>to<sp/>use<sp/>those<sp/>interfaces:</highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/>Parameter<sp/>a(&quot;int&quot;,<sp/>10);</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral"><sp/><sp/>a.Name();<sp/><sp/>//<sp/>return<sp/>int</highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"><sp/><sp/>a.Type();<sp/><sp/>//<sp/>return<sp/>apollo::cyber::proto::ParamType::INT</highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral"><sp/><sp/>a.TypeName();<sp/><sp/>//<sp/>return<sp/>string:<sp/>INT</highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral"><sp/><sp/>a.DebugString();<sp/><sp/>//<sp/>return<sp/>string:<sp/>{name:<sp/>&quot;int&quot;,<sp/>type:<sp/>&quot;INT&quot;,<sp/>value:<sp/>10}</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"><sp/><sp/>int<sp/>x<sp/>=<sp/>a.AsInt64();<sp/><sp/>//<sp/>x<sp/>=<sp/>10</highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"><sp/><sp/>x<sp/>=<sp/>a.value&lt;int64_t&gt;();<sp/><sp/>//<sp/>x<sp/>=<sp/>10</highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral"><sp/><sp/>x<sp/>=<sp/>a.AsString();<sp/><sp/>//<sp/>Undefined<sp/>behavior,<sp/>error<sp/>log<sp/>prompt</highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral"><sp/><sp/>f.TypeName();<sp/><sp/>//<sp/>return<sp/>string:<sp/>chatter</highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral"><sp/><sp/>auto<sp/>chatter<sp/>=<sp/>f.value&lt;Chatter&gt;();</highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="389"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="390"><highlight class="stringliteral">###<sp/>Parameter<sp/>Service</highlight></codeline>
<codeline lineno="391"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="392"><highlight class="stringliteral">If<sp/>a<sp/>node<sp/>wants<sp/>to<sp/>provide<sp/>a<sp/>Parameter<sp/>Service<sp/>to<sp/>other<sp/>nodes,<sp/>then<sp/>you<sp/>need<sp/>to<sp/>create<sp/>a<sp/>`ParameterService`.</highlight></codeline>
<codeline lineno="393"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="400"><highlight class="stringliteral"><sp/><sp/>explicit<sp/>ParameterService(const<sp/>std::shared_ptr&lt;Node&gt;&amp;<sp/>node);</highlight></codeline>
<codeline lineno="401"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="402"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="403"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="404"><highlight class="stringliteral">Since<sp/>all<sp/>parameters<sp/>are<sp/>stored<sp/>in<sp/>the<sp/>parameter<sp/>service<sp/>object,<sp/>the<sp/>parameters<sp/>can<sp/>be<sp/>manipulated<sp/>directly<sp/>in<sp/>the<sp/>ParameterService<sp/>without<sp/>sending<sp/>a<sp/>service<sp/>request.</highlight></codeline>
<codeline lineno="405"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="406"><highlight class="stringliteral">**Setting<sp/>parameters:**</highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="408"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="414"><highlight class="stringliteral"><sp/><sp/>void<sp/>SetParameter(const<sp/>Parameter&amp;<sp/>parameter);</highlight></codeline>
<codeline lineno="415"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="416"><highlight class="stringliteral">**Getting<sp/>parameters:**</highlight></codeline>
<codeline lineno="417"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="418"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="427"><highlight class="stringliteral"><sp/><sp/>bool<sp/>GetParameter(const<sp/>std::string&amp;<sp/>param_name,<sp/>Parameter*<sp/>parameter);</highlight></codeline>
<codeline lineno="428"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="429"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="430"><highlight class="stringliteral">**Getting<sp/>the<sp/>list<sp/>of<sp/>parameters:**</highlight></codeline>
<codeline lineno="431"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="440"><highlight class="stringliteral"><sp/><sp/>bool<sp/>ListParameters(std::vector&lt;Parameter&gt;*<sp/>parameters);</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral">###<sp/>Parameter<sp/>Client</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral">If<sp/>a<sp/>node<sp/>wants<sp/>to<sp/>use<sp/>parameter<sp/>services<sp/>of<sp/>other<sp/>nodes,<sp/>you<sp/>need<sp/>to<sp/>create<sp/>a<sp/>`ParameterClient`.</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="454"><highlight class="stringliteral"><sp/><sp/>ParameterClient(const<sp/>std::shared_ptr&lt;Node&gt;&amp;<sp/>node,<sp/>const<sp/>std::string&amp;<sp/>service_node_name);</highlight></codeline>
<codeline lineno="455"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="456"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="457"><highlight class="stringliteral">You<sp/>could<sp/>also<sp/>perform<sp/>`SetParameter`,<sp/>`GetParameter`<sp/>and<sp/>`ListParameters`<sp/>mentioned<sp/>under<sp/>[Parameter<sp/>Service](#Parameter-Service).</highlight></codeline>
<codeline lineno="458"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="459"><highlight class="stringliteral">###<sp/>Demo<sp/>-<sp/>example</highlight></codeline>
<codeline lineno="460"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="461"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="462"><highlight class="stringliteral">#include<sp/>&quot;cyber/cyber.h&quot;</highlight></codeline>
<codeline lineno="463"><highlight class="stringliteral">#include<sp/>&quot;cyber/parameter/parameter_client.h&quot;</highlight></codeline>
<codeline lineno="464"><highlight class="stringliteral">#include<sp/>&quot;cyber/parameter/parameter_server.h&quot;</highlight></codeline>
<codeline lineno="465"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="466"><highlight class="stringliteral">using<sp/>apollo::cyber::Parameter;</highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral">using<sp/>apollo::cyber::ParameterServer;</highlight></codeline>
<codeline lineno="468"><highlight class="stringliteral">using<sp/>apollo::cyber::ParameterClient;</highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"><sp/><sp/>apollo::cyber::Init(*argv);</highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral"><sp/><sp/>std::shared_ptr&lt;apollo::cyber::Node&gt;<sp/>node<sp/>=</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>apollo::cyber::CreateNode(&quot;parameter&quot;);</highlight></codeline>
<codeline lineno="474"><highlight class="stringliteral"><sp/><sp/>auto<sp/>param_server<sp/>=<sp/>std::make_shared&lt;ParameterServer&gt;(node);</highlight></codeline>
<codeline lineno="475"><highlight class="stringliteral"><sp/><sp/>auto<sp/>param_client<sp/>=<sp/>std::make_shared&lt;ParameterClient&gt;(node,<sp/>&quot;parameter&quot;);</highlight></codeline>
<codeline lineno="476"><highlight class="stringliteral"><sp/><sp/>param_server-&gt;SetParameter(Parameter(&quot;int&quot;,<sp/>1));</highlight></codeline>
<codeline lineno="477"><highlight class="stringliteral"><sp/><sp/>Parameter<sp/>parameter;</highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral"><sp/><sp/>param_server-&gt;GetParameter(&quot;int&quot;,<sp/>&amp;parameter);</highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;int:<sp/>&quot;<sp/>&lt;&lt;<sp/>parameter.AsInt64();</highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"><sp/><sp/>param_client-&gt;SetParameter(Parameter(&quot;string&quot;,<sp/>&quot;test&quot;));</highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"><sp/><sp/>param_client-&gt;GetParameter(&quot;string&quot;,<sp/>&amp;parameter);</highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;string:<sp/>&quot;<sp/>&lt;&lt;<sp/>parameter.AsString();</highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"><sp/><sp/>param_client-&gt;GetParameter(&quot;int&quot;,<sp/>&amp;parameter);</highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;int:<sp/>&quot;<sp/>&lt;&lt;<sp/>parameter.AsInt64();</highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="486"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral">####<sp/>Build<sp/>and<sp/>run</highlight></codeline>
<codeline lineno="489"><highlight class="stringliteral">-<sp/>Build:<sp/>bazel<sp/>build<sp/>cyber/examples/…</highlight></codeline>
<codeline lineno="490"><highlight class="stringliteral">-<sp/>Run:<sp/>./bazel-bin/cyber/examples/paramserver</highlight></codeline>
<codeline lineno="491"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="492"><highlight class="stringliteral">##<sp/>Log<sp/>API<sp/></highlight></codeline>
<codeline lineno="493"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="494"><highlight class="stringliteral">###<sp/>Log<sp/>library</highlight></codeline>
<codeline lineno="495"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="496"><highlight class="stringliteral">Cyber<sp/>log<sp/>library<sp/>is<sp/>built<sp/>on<sp/>top<sp/>of<sp/>glog.<sp/>The<sp/>following<sp/>header<sp/>files<sp/>need<sp/>to<sp/>be<sp/>included:</highlight></codeline>
<codeline lineno="497"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="498"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="499"><highlight class="stringliteral">#include<sp/>&quot;cyber/common/log.h&quot;</highlight></codeline>
<codeline lineno="500"><highlight class="stringliteral">#include<sp/>&quot;cyber/init.h&quot;</highlight></codeline>
<codeline lineno="501"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="502"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="503"><highlight class="stringliteral">###<sp/>Log<sp/>configuration</highlight></codeline>
<codeline lineno="504"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="505"><highlight class="stringliteral">Default<sp/>global<sp/>config<sp/>path:<sp/>cyber/setup.bash</highlight></codeline>
<codeline lineno="506"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="507"><highlight class="stringliteral">The<sp/>configs<sp/>below<sp/>could<sp/>be<sp/>modified<sp/>by<sp/>devloper:</highlight></codeline>
<codeline lineno="508"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="509"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="510"><highlight class="stringliteral">export<sp/>GLOG_log_dir=/apollo/data/log</highlight></codeline>
<codeline lineno="511"><highlight class="stringliteral">export<sp/>GLOG_alsologtostderr=0</highlight></codeline>
<codeline lineno="512"><highlight class="stringliteral">export<sp/>GLOG_colorlogtostderr=1</highlight></codeline>
<codeline lineno="513"><highlight class="stringliteral">export<sp/>GLOG_minloglevel=0</highlight></codeline>
<codeline lineno="514"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="515"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="516"><highlight class="stringliteral">###<sp/>Log<sp/>initialization</highlight></codeline>
<codeline lineno="517"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="518"><highlight class="stringliteral">Call<sp/>the<sp/>Init<sp/>method<sp/>at<sp/>the<sp/>code<sp/>entry<sp/>to<sp/>initialize<sp/>the<sp/>log:</highlight></codeline>
<codeline lineno="519"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="520"><highlight class="stringliteral">```c++</highlight></codeline>
<codeline lineno="521"><highlight class="stringliteral">apollo::cyber::cyber::Init(argv[0])<sp/>is<sp/>initialized.<sp/></highlight></codeline>
<codeline lineno="522"><highlight class="stringliteral">If<sp/>no<sp/>macro<sp/>definition<sp/>is<sp/>made<sp/>in<sp/>the<sp/>previous<sp/>component,<sp/>the<sp/>corresponding<sp/>log<sp/>is<sp/>printed<sp/>to<sp/>the<sp/>binary<sp/>log.</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="524"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="525"><highlight class="stringliteral">###<sp/>Log<sp/>output<sp/>macro</highlight></codeline>
<codeline lineno="526"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="527"><highlight class="stringliteral">Log<sp/>library<sp/>is<sp/>encapsulated<sp/>in<sp/>Log<sp/>printing<sp/>macros.<sp/>The<sp/>related<sp/>log<sp/>macros<sp/>are<sp/>used<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="528"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="529"><highlight class="stringliteral">```C</highlight></codeline>
<codeline lineno="530"><highlight class="stringliteral">ADEBUG<sp/>&lt;&lt;<sp/>&quot;hello<sp/>cyber.&quot;;</highlight></codeline>
<codeline lineno="531"><highlight class="stringliteral">AINFO<sp/><sp/>&lt;&lt;<sp/>&quot;hello<sp/>cyber.&quot;;</highlight></codeline>
<codeline lineno="532"><highlight class="stringliteral">AWARN<sp/><sp/>&lt;&lt;<sp/>&quot;hello<sp/>cyber.&quot;;</highlight></codeline>
<codeline lineno="533"><highlight class="stringliteral">AERROR<sp/>&lt;&lt;<sp/>&quot;hello<sp/>cyber.&quot;;</highlight></codeline>
<codeline lineno="534"><highlight class="stringliteral">AFATAL<sp/>&lt;&lt;<sp/>&quot;hello<sp/>cyber.&quot;;</highlight></codeline>
<codeline lineno="535"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="536"><highlight class="stringliteral">```</highlight></codeline>
<codeline lineno="537"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="538"><highlight class="stringliteral">###<sp/>Log<sp/>format</highlight></codeline>
<codeline lineno="539"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="540"><highlight class="stringliteral">The<sp/>format<sp/>is<sp/>`&lt;MODULE_NAME&gt;.log.&lt;LOG_LEVEL&gt;.&lt;datetime&gt;.&lt;process_id&gt;`</highlight></codeline>
<codeline lineno="541"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="542"><highlight class="stringliteral">###<sp/><sp/>About<sp/>log<sp/>files</highlight></codeline>
<codeline lineno="543"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="544"><highlight class="stringliteral">Currently,<sp/>the<sp/>only<sp/>different<sp/>output<sp/>behavior<sp/>from<sp/>default<sp/>glog<sp/>is<sp/>that<sp/>different<sp/>log<sp/>levels<sp/>of<sp/>a<sp/>module<sp/>will<sp/>be<sp/>written<sp/>into<sp/>the<sp/>same<sp/>log<sp/>file.</highlight></codeline>
<codeline lineno="545"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="546"><highlight class="stringliteral">##<sp/>Building<sp/>a<sp/>module<sp/>based<sp/>on<sp/>Component</highlight></codeline>
<codeline lineno="547"><highlight class="stringliteral">###<sp/>Key<sp/>concepts</highlight></codeline>
<codeline lineno="548"><highlight class="stringliteral">####<sp/>1.<sp/>Component</highlight></codeline>
<codeline lineno="549"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="550"><highlight class="stringliteral">The<sp/>component<sp/>is<sp/>the<sp/>base<sp/>class<sp/>that<sp/>Cyber-RT<sp/>provides<sp/>to<sp/>build<sp/>application<sp/>modules.<sp/>Each<sp/>specific<sp/>application<sp/>module<sp/>can<sp/>inherit<sp/>the<sp/>Component<sp/>class<sp/>and<sp/>define<sp/>its<sp/>own<sp/>`Init`<sp/>and<sp/>`Proc`<sp/>functions<sp/>so<sp/>that<sp/>it<sp/>can<sp/>be<sp/>loaded<sp/>into<sp/>the<sp/>Cyber<sp/>framework.</highlight></codeline>
<codeline lineno="551"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="552"><highlight class="stringliteral">####<sp/>2.<sp/>Binary<sp/>vs<sp/>Component</highlight></codeline>
<codeline lineno="553"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="554"><highlight class="stringliteral">There<sp/>are<sp/>two<sp/>options<sp/>to<sp/>use<sp/>Cyber-RT<sp/>framework<sp/>for<sp/>applications:</highlight></codeline>
<codeline lineno="555"><highlight class="stringliteral"><sp/><sp/></highlight></codeline>
<codeline lineno="556"><highlight class="stringliteral">-<sp/>Binary<sp/>based:<sp/>the<sp/>application<sp/>is<sp/>compiled<sp/>separately<sp/>into<sp/>a<sp/>binary,<sp/>which<sp/>communicates<sp/>with<sp/>other<sp/>cyber<sp/>modules<sp/>by<sp/>creating<sp/>its<sp/>own<sp/>`Reader`<sp/>and<sp/>`Writer`.</highlight></codeline>
<codeline lineno="557"><highlight class="stringliteral">-<sp/>Component<sp/>based:<sp/>the<sp/>application<sp/>is<sp/>compiled<sp/>into<sp/>a<sp/>Shared<sp/>Library.<sp/>By<sp/>inheriting<sp/>the<sp/>Component<sp/>class<sp/>and<sp/>writing<sp/>the<sp/>corresponding<sp/>dag<sp/>description<sp/>file,<sp/>the<sp/>Cyber-RT<sp/>framework<sp/>will<sp/>load<sp/>and<sp/>run<sp/>the<sp/>application<sp/>dynamically.</highlight></codeline>
<codeline lineno="558"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="559"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="560"><highlight class="stringliteral">#####<sp/>The<sp/>essential<sp/>Component<sp/>interface</highlight></codeline>
<codeline lineno="561"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="562"><highlight class="stringliteral">-<sp/>The<sp/>component&apos;</highlight><highlight class="normal">s<sp/>`<ref refid="namespaceapollo_1_1cyber_1a2d055a81b338116634deaf8ac3367aca" kindref="member">Init</ref>()`<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>is<sp/>like<sp/>the<sp/>main<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>that<sp/>does<sp/>some<sp/>initialization<sp/>of<sp/>the<sp/>algorithm.</highlight></codeline>
<codeline lineno="563"><highlight class="normal">-<sp/>Component</highlight><highlight class="stringliteral">&apos;s<sp/>`Proc()`<sp/>function<sp/>works<sp/>like<sp/>Reader&apos;</highlight><highlight class="normal">s<sp/>callback<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>that<sp/>is<sp/>called<sp/>by<sp/>the<sp/>framework<sp/>when<sp/>a<sp/>message<sp/>arrives.</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">#####<sp/>Advantages<sp/>of<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Component</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">-<sp/>Component<sp/>can<sp/>be<sp/>loaded<sp/>into<sp/>different<sp/>processes<sp/>through<sp/>the<sp/>launch<sp/>file,<sp/>and<sp/>the<sp/>deployment<sp/>is<sp/>flexible.</highlight></codeline>
<codeline lineno="568"><highlight class="normal">-<sp/>Component<sp/>can<sp/>change<sp/>the<sp/>received<sp/>channel<sp/>name<sp/>by<sp/>modifying<sp/>the<sp/>dag<sp/>file<sp/>without<sp/>recompiling.</highlight></codeline>
<codeline lineno="569"><highlight class="normal">-<sp/>Component<sp/>supports<sp/>receiving<sp/>multiple<sp/>types<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="570"><highlight class="normal">-<sp/>Component<sp/>supports<sp/>providing<sp/>multiple<sp/>fusion<sp/>strategies.</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">####<sp/>3.<sp/>Dag<sp/>file<sp/>format</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">An<sp/>example<sp/>dag<sp/>file:</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal">```</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/>Define<sp/>all<sp/>coms<sp/>in<sp/>DAG<sp/>streaming.</highlight></codeline>
<codeline lineno="578"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>module_config<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>module_library<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;lib/libperception_component.so&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>components<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_name<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;PerceptionComponent&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;perception&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readers<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel:<sp/></highlight><highlight class="stringliteral">&quot;perception/channel_name&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>timer_components<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_name<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;DriverComponent&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;driver&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interval<sp/>:<sp/>100</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal">```</highlight></codeline>
<codeline lineno="598"><highlight class="normal">-<sp/>**module_library**:<sp/>If<sp/>you<sp/>want<sp/>to<sp/>load<sp/>the<sp/>.so<sp/>library<sp/>the<sp/>root<sp/>directory<sp/>is<sp/>the<sp/>working<sp/>directory<sp/>of<sp/>cyber<sp/>(the<sp/>same<sp/>directory<sp/>of<sp/>`setup.bash`)</highlight></codeline>
<codeline lineno="599"><highlight class="normal">-<sp/>**components<sp/>&amp;<sp/>timer_component**:<sp/>Select<sp/>the<sp/>base<sp/>component<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">type<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>loaded.</highlight></codeline>
<codeline lineno="600"><highlight class="normal">-<sp/>**class_name**:<sp/>the<sp/>name<sp/>of<sp/>the<sp/>component<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">to<sp/>load</highlight></codeline>
<codeline lineno="601"><highlight class="normal">-<sp/>**name**:<sp/>the<sp/>loaded<sp/>class_name<sp/>as<sp/>the<sp/>identifier<sp/>of<sp/>the<sp/>loading<sp/>example</highlight></codeline>
<codeline lineno="602"><highlight class="normal">-<sp/>**readers**:<sp/>Data<sp/>received<sp/>by<sp/>the<sp/>current<sp/>component,<sp/>supporting<sp/>1-3<sp/>channels<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal">###<sp/>Demo<sp/>-<sp/>examples</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">####<sp/>Common_component_example(cyber/examples/common_component_example</highlight><highlight class="comment">/*)</highlight></codeline>
<codeline lineno="607"><highlight class="comment">Header<sp/>definition(common_component_example.h)</highlight></codeline>
<codeline lineno="608"><highlight class="comment"></highlight></codeline>
<codeline lineno="609"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="610"><highlight class="comment">#include<sp/>&lt;memory&gt;</highlight></codeline>
<codeline lineno="611"><highlight class="comment"></highlight></codeline>
<codeline lineno="612"><highlight class="comment">#include<sp/>&quot;cyber/class_loader/class_loader.h&quot;</highlight></codeline>
<codeline lineno="613"><highlight class="comment">#include<sp/>&quot;cyber/component/component.h&quot;</highlight></codeline>
<codeline lineno="614"><highlight class="comment">#include<sp/>&quot;cyber/examples/proto/examples.pb.h&quot;</highlight></codeline>
<codeline lineno="615"><highlight class="comment"></highlight></codeline>
<codeline lineno="616"><highlight class="comment">using<sp/>apollo::cyber::examples::proto::Driver;</highlight></codeline>
<codeline lineno="617"><highlight class="comment">using<sp/>apollo::cyber::Component;</highlight></codeline>
<codeline lineno="618"><highlight class="comment">using<sp/>apollo::cyber::ComponentBase;</highlight></codeline>
<codeline lineno="619"><highlight class="comment"></highlight></codeline>
<codeline lineno="620"><highlight class="comment">class<sp/>Commontestcomponent<sp/>:<sp/>public<sp/>Component&lt;Driver,<sp/>Driver&gt;<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>public:</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/><sp/>bool<sp/>Init()<sp/>override;</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/>bool<sp/>Proc(const<sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg0,</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg1)<sp/>override;</highlight></codeline>
<codeline lineno="625"><highlight class="comment">};</highlight></codeline>
<codeline lineno="626"><highlight class="comment">CYBER_REGISTER_COMPONENT(Commontestcomponent)</highlight></codeline>
<codeline lineno="627"><highlight class="comment">```</highlight></codeline>
<codeline lineno="628"><highlight class="comment"></highlight></codeline>
<codeline lineno="629"><highlight class="comment">Cpp<sp/>file<sp/>implementation(common_component_example.cc)</highlight></codeline>
<codeline lineno="630"><highlight class="comment"></highlight></codeline>
<codeline lineno="631"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="632"><highlight class="comment">#include<sp/>&quot;cyber/examples/common_component_smaple/common_component_example.h&quot;</highlight></codeline>
<codeline lineno="633"><highlight class="comment"></highlight></codeline>
<codeline lineno="634"><highlight class="comment">#include<sp/>&quot;cyber/class_loader/class_loader.h&quot;</highlight></codeline>
<codeline lineno="635"><highlight class="comment">#include<sp/>&quot;cyber/component/component.h&quot;</highlight></codeline>
<codeline lineno="636"><highlight class="comment"></highlight></codeline>
<codeline lineno="637"><highlight class="comment">bool<sp/>Commontestcomponent::Init()<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;Commontest<sp/>component<sp/>init&quot;;</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="640"><highlight class="comment">}</highlight></codeline>
<codeline lineno="641"><highlight class="comment"></highlight></codeline>
<codeline lineno="642"><highlight class="comment">bool<sp/>Commontestcomponent::Proc(const<sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg0,</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::shared_ptr&lt;Driver&gt;&amp;<sp/>msg1)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;Start<sp/>commontest<sp/>component<sp/>Proc<sp/>[&quot;<sp/>&lt;&lt;<sp/>msg0-&gt;msg_id()<sp/>&lt;&lt;<sp/>&quot;]<sp/>[&quot;</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>msg1-&gt;msg_id()<sp/>&lt;&lt;<sp/>&quot;]&quot;;</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="647"><highlight class="comment">}</highlight></codeline>
<codeline lineno="648"><highlight class="comment">```</highlight></codeline>
<codeline lineno="649"><highlight class="comment"></highlight></codeline>
<codeline lineno="650"><highlight class="comment">####<sp/>Timer_component_example(cyber/examples/timer_component_example/*)</highlight></codeline>
<codeline lineno="651"><highlight class="comment"></highlight></codeline>
<codeline lineno="652"><highlight class="comment">Header<sp/>definition(timer_component_example.h)</highlight></codeline>
<codeline lineno="653"><highlight class="comment"></highlight></codeline>
<codeline lineno="654"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="655"><highlight class="comment">#include<sp/>&lt;memory&gt;</highlight></codeline>
<codeline lineno="656"><highlight class="comment"></highlight></codeline>
<codeline lineno="657"><highlight class="comment">#include<sp/>&quot;cyber/class_loader/class_loader.h&quot;</highlight></codeline>
<codeline lineno="658"><highlight class="comment">#include<sp/>&quot;cyber/component/component.h&quot;</highlight></codeline>
<codeline lineno="659"><highlight class="comment">#include<sp/>&quot;cyber/component/timer_component.h&quot;</highlight></codeline>
<codeline lineno="660"><highlight class="comment">#include<sp/>&quot;cyber/examples/proto/examples.pb.h&quot;</highlight></codeline>
<codeline lineno="661"><highlight class="comment"></highlight></codeline>
<codeline lineno="662"><highlight class="comment">using<sp/>apollo::cyber::examples::proto::Driver;</highlight></codeline>
<codeline lineno="663"><highlight class="comment">using<sp/>apollo::cyber::Component;</highlight></codeline>
<codeline lineno="664"><highlight class="comment">using<sp/>apollo::cyber::ComponentBase;</highlight></codeline>
<codeline lineno="665"><highlight class="comment">using<sp/>apollo::cyber::TimerComponent;</highlight></codeline>
<codeline lineno="666"><highlight class="comment">using<sp/>apollo::cyber::Writer;</highlight></codeline>
<codeline lineno="667"><highlight class="comment"></highlight></codeline>
<codeline lineno="668"><highlight class="comment">class<sp/>TimertestComponent<sp/>:<sp/>public<sp/>TimerComponent<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>public:</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/>bool<sp/>Init()<sp/>override;</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/>bool<sp/>Proc()<sp/>override;</highlight></codeline>
<codeline lineno="672"><highlight class="comment"></highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>private:</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/>std::shared_ptr&lt;Writer&lt;Driver&gt;&gt;<sp/>driver_writer_<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline lineno="675"><highlight class="comment">};</highlight></codeline>
<codeline lineno="676"><highlight class="comment">CYBER_REGISTER_COMPONENT(TimertestComponent)</highlight></codeline>
<codeline lineno="677"><highlight class="comment">```</highlight></codeline>
<codeline lineno="678"><highlight class="comment">Cpp<sp/>file<sp/>implementation(timer_component_example.cc)</highlight></codeline>
<codeline lineno="679"><highlight class="comment"></highlight></codeline>
<codeline lineno="680"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="681"><highlight class="comment">#include<sp/>&quot;cyber/examples/timer_component_example/timer_component_example.h&quot;</highlight></codeline>
<codeline lineno="682"><highlight class="comment"></highlight></codeline>
<codeline lineno="683"><highlight class="comment">#include<sp/>&quot;cyber/class_loader/class_loader.h&quot;</highlight></codeline>
<codeline lineno="684"><highlight class="comment">#include<sp/>&quot;cyber/component/component.h&quot;</highlight></codeline>
<codeline lineno="685"><highlight class="comment">#include<sp/>&quot;cyber/examples/proto/examples.pb.h&quot;</highlight></codeline>
<codeline lineno="686"><highlight class="comment"></highlight></codeline>
<codeline lineno="687"><highlight class="comment">bool<sp/>TimertestComponent::Init()<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/>driver_writer_<sp/>=<sp/>node_-&gt;CreateWriter&lt;Driver&gt;(&quot;/carstatus/channel&quot;);</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="690"><highlight class="comment">}</highlight></codeline>
<codeline lineno="691"><highlight class="comment"></highlight></codeline>
<codeline lineno="692"><highlight class="comment">bool<sp/>TimertestComponent::Proc()<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/>static<sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/>auto<sp/>out_msg<sp/>=<sp/>std::make_shared&lt;Driver&gt;();</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/><sp/>out_msg-&gt;set_msg_id(i++);</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/><sp/>driver_writer_-&gt;Write(out_msg);</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;timertestcomponent:<sp/>Write<sp/>drivermsg-&gt;&quot;</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>out_msg-&gt;ShortDebugString();</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="700"><highlight class="comment">}</highlight></codeline>
<codeline lineno="701"><highlight class="comment">```</highlight></codeline>
<codeline lineno="702"><highlight class="comment">####<sp/>Build<sp/>and<sp/>run</highlight></codeline>
<codeline lineno="703"><highlight class="comment">Use<sp/>timertestcomponent<sp/>as<sp/>example:</highlight></codeline>
<codeline lineno="704"><highlight class="comment"></highlight></codeline>
<codeline lineno="705"><highlight class="comment">-<sp/>Build:<sp/>bazel<sp/>build<sp/>cyber/examples/timer_component_smaple/…</highlight></codeline>
<codeline lineno="706"><highlight class="comment">-<sp/>Run:<sp/>mainboard<sp/>-d<sp/>cyber/examples/timer_component_smaple/timer.dag</highlight></codeline>
<codeline lineno="707"><highlight class="comment"></highlight></codeline>
<codeline lineno="708"><highlight class="comment"></highlight></codeline>
<codeline lineno="709"><highlight class="comment">###<sp/>Precautions</highlight></codeline>
<codeline lineno="710"><highlight class="comment"></highlight></codeline>
<codeline lineno="711"><highlight class="comment">-<sp/>Component<sp/>needs<sp/>to<sp/>be<sp/>registered<sp/>to<sp/>load<sp/>the<sp/>class<sp/>through<sp/>SharedLibrary.<sp/>The<sp/>registration<sp/>interface<sp/>looks<sp/>like:</highlight></codeline>
<codeline lineno="712"><highlight class="comment"></highlight></codeline>
<codeline lineno="713"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="714"><highlight class="comment">CYBER_REGISTER_CLASS(DriverComponent)</highlight></codeline>
<codeline lineno="715"><highlight class="comment">```</highlight></codeline>
<codeline lineno="716"><highlight class="comment"></highlight></codeline>
<codeline lineno="717"><highlight class="comment">If<sp/>you<sp/>use<sp/>a<sp/>namespace<sp/>when<sp/>registering,<sp/>you<sp/>also<sp/>need<sp/>to<sp/>add<sp/>a<sp/>namespace<sp/>when<sp/>you<sp/>define<sp/>it<sp/>in<sp/>the<sp/>dag<sp/>file.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"></highlight></codeline>
<codeline lineno="719"><highlight class="comment">-<sp/>The<sp/>configuration<sp/>files<sp/>of<sp/>the<sp/>Component<sp/>and<sp/>TimerComponent<sp/>are<sp/>different,<sp/>please<sp/>be<sp/>careful<sp/>not<sp/>to<sp/>mix<sp/>the<sp/>two<sp/>up.</highlight></codeline>
<codeline lineno="720"><highlight class="comment"></highlight></codeline>
<codeline lineno="721"><highlight class="comment">##<sp/>Launch</highlight></codeline>
<codeline lineno="722"><highlight class="comment"></highlight></codeline>
<codeline lineno="723"><highlight class="comment">**cyber_launch**<sp/>is<sp/>the<sp/>launcher<sp/>of<sp/>the<sp/>Cyber-RT<sp/>framework.<sp/>It<sp/>starts<sp/>multiple<sp/>mainboards<sp/>according<sp/>to<sp/>the<sp/>launch<sp/>file,<sp/>and<sp/>loads<sp/>different<sp/>components<sp/>into<sp/>different<sp/>mainboards<sp/>according<sp/>to<sp/>the<sp/>dag<sp/>file.</highlight></codeline>
<codeline lineno="724"><highlight class="comment">cyber_launch<sp/>supports<sp/>two<sp/>scenarios<sp/>for<sp/>dynamically<sp/>loading<sp/>components<sp/>or<sp/>starting<sp/>Binary<sp/>programs<sp/>in<sp/>a<sp/>child<sp/>process.</highlight></codeline>
<codeline lineno="725"><highlight class="comment"></highlight></codeline>
<codeline lineno="726"><highlight class="comment">###<sp/>Launch<sp/>File<sp/>Format</highlight></codeline>
<codeline lineno="727"><highlight class="comment"></highlight></codeline>
<codeline lineno="728"><highlight class="comment">```</highlight></codeline>
<codeline lineno="729"><highlight class="comment">&lt;cyber&gt;</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;module&gt;</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;name&gt;driver&lt;/name&gt;</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;dag_conf&gt;driver.dag&lt;/dag_conf&gt;</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;process_name&gt;&lt;/process_name&gt;</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;exception_handler&gt;exit&lt;/exception_handler&gt;</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/module&gt;</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;module&gt;</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;name&gt;perception&lt;/name&gt;</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;dag_conf&gt;perception.dag&lt;/dag_conf&gt;</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;process_name&gt;&lt;/process_name&gt;</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;exception_handler&gt;respawn&lt;/exception_handler&gt;</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/module&gt;</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;module&gt;</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;name&gt;planning&lt;/name&gt;</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;dag_conf&gt;planning.dag&lt;/dag_conf&gt;</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;process_name&gt;&lt;/process_name&gt;</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/module&gt;</highlight></codeline>
<codeline lineno="747"><highlight class="comment">&lt;/cyber&gt;</highlight></codeline>
<codeline lineno="748"><highlight class="comment">```</highlight></codeline>
<codeline lineno="749"><highlight class="comment"></highlight></codeline>
<codeline lineno="750"><highlight class="comment">**Module**:</highlight></codeline>
<codeline lineno="751"><highlight class="comment">Each<sp/>loaded<sp/>component<sp/>or<sp/>binary<sp/>is<sp/>a<sp/>module</highlight></codeline>
<codeline lineno="752"><highlight class="comment"></highlight></codeline>
<codeline lineno="753"><highlight class="comment">-<sp/>**name**<sp/>is<sp/>the<sp/>loaded<sp/>module<sp/>name</highlight></codeline>
<codeline lineno="754"><highlight class="comment">-<sp/>**dag_conf**<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>corresponding<sp/>dag<sp/>file<sp/>of<sp/>the<sp/>component</highlight></codeline>
<codeline lineno="755"><highlight class="comment">-<sp/>**process_name**<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>mainboard<sp/>process<sp/>once<sp/>started,<sp/>and<sp/>the<sp/>same<sp/>component<sp/>of<sp/>process_name<sp/>will<sp/>be<sp/>loaded<sp/>and<sp/>run<sp/>in<sp/>the<sp/>same<sp/>process.</highlight></codeline>
<codeline lineno="756"><highlight class="comment">-<sp/>**exception_handler**<sp/>is<sp/>the<sp/>handler<sp/>method<sp/>when<sp/>the<sp/>exception<sp/>occurs<sp/>in<sp/>the<sp/>process.<sp/>The<sp/>value<sp/>can<sp/>be<sp/>exit<sp/>or<sp/>respawn<sp/>listed<sp/>below.</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/>-<sp/>exit,<sp/>which<sp/>means<sp/>that<sp/>the<sp/>entire<sp/>process<sp/>needs<sp/>to<sp/>stop<sp/>running<sp/>when<sp/>the<sp/>current<sp/>process<sp/>exits<sp/>abnormally.<sp/></highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/><sp/><sp/>-<sp/>respawn,<sp/>the<sp/>current<sp/>process<sp/>needs<sp/>to<sp/>be<sp/>restarted<sp/>after<sp/>abnormal<sp/>exit.<sp/>Start<sp/>this<sp/>process.<sp/>If<sp/>there<sp/>is<sp/>no<sp/>such<sp/>thing<sp/>as<sp/>it<sp/>is<sp/>empty,<sp/>it<sp/>means<sp/>no<sp/>treatment.<sp/>Can<sp/>be<sp/>controlled<sp/>by<sp/>the<sp/>user<sp/>according<sp/>to<sp/>the<sp/>specific<sp/>conditions<sp/>of<sp/>the<sp/>process</highlight></codeline>
<codeline lineno="759"><highlight class="comment"></highlight></codeline>
<codeline lineno="760"><highlight class="comment">##<sp/>Timer</highlight></codeline>
<codeline lineno="761"><highlight class="comment"></highlight></codeline>
<codeline lineno="762"><highlight class="comment">Timer<sp/>can<sp/>be<sp/>used<sp/>to<sp/>create<sp/>a<sp/>timed<sp/>task<sp/>to<sp/>run<sp/>on<sp/>a<sp/>periodic<sp/>basis,<sp/>or<sp/>to<sp/>run<sp/>only<sp/>once</highlight></codeline>
<codeline lineno="763"><highlight class="comment"></highlight></codeline>
<codeline lineno="764"><highlight class="comment">###<sp/>Timer<sp/>Interface</highlight></codeline>
<codeline lineno="765"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/>Timer(uint32_t<sp/>period,<sp/>std::function&lt;void()&gt;<sp/>callback,<sp/>bool<sp/>oneshot);</highlight></codeline>
<codeline lineno="775"><highlight class="comment">```</highlight></codeline>
<codeline lineno="776"><highlight class="comment"></highlight></codeline>
<codeline lineno="777"><highlight class="comment">Or<sp/>you<sp/>could<sp/>encapsulate<sp/>the<sp/>parameters<sp/>into<sp/>a<sp/>timer<sp/>option<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="778"><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="780"><highlight class="comment">struct<sp/>TimerOption<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/>uint32_t<sp/>period;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>period<sp/>of<sp/>the<sp/>timer,<sp/>unit<sp/>is<sp/>ms</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/>std::function&lt;void()&gt;<sp/>callback;<sp/><sp/>//<sp/>The<sp/>tasks<sp/>that<sp/>the<sp/>timer<sp/>needs<sp/>to<sp/>perform</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/><sp/>bool<sp/>oneshot;<sp/><sp/>//<sp/>True:<sp/>perform<sp/>the<sp/>callback<sp/>only<sp/>after<sp/>the<sp/>first<sp/>timing<sp/>cycle</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>False:<sp/>perform<sp/>the<sp/>callback<sp/>every<sp/>timed<sp/>period</highlight></codeline>
<codeline lineno="785"><highlight class="comment">};</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/>explicit<sp/>Timer(TimerOption<sp/>opt);</highlight></codeline>
<codeline lineno="792"><highlight class="comment">```</highlight></codeline>
<codeline lineno="793"><highlight class="comment"></highlight></codeline>
<codeline lineno="794"><highlight class="comment">###<sp/>Start<sp/>Timer</highlight></codeline>
<codeline lineno="795"><highlight class="comment"></highlight></codeline>
<codeline lineno="796"><highlight class="comment">After<sp/>creating<sp/>a<sp/>Timer<sp/>instance,<sp/>you<sp/>must<sp/>call<sp/>`Timer::Start()`<sp/>to<sp/>start<sp/>the<sp/>timer.</highlight></codeline>
<codeline lineno="797"><highlight class="comment"></highlight></codeline>
<codeline lineno="798"><highlight class="comment">###<sp/>Stop<sp/>Timer</highlight></codeline>
<codeline lineno="799"><highlight class="comment"></highlight></codeline>
<codeline lineno="800"><highlight class="comment">When<sp/>you<sp/>need<sp/>to<sp/>manually<sp/>stop<sp/>a<sp/>timer<sp/>that<sp/>has<sp/>already<sp/>started,<sp/>you<sp/>can<sp/>call<sp/>the<sp/>`Timer::Stop()`<sp/>interface.</highlight></codeline>
<codeline lineno="801"><highlight class="comment"></highlight></codeline>
<codeline lineno="802"><highlight class="comment">###<sp/>Demo<sp/>-<sp/>example</highlight></codeline>
<codeline lineno="803"><highlight class="comment"></highlight></codeline>
<codeline lineno="804"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="805"><highlight class="comment">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline lineno="806"><highlight class="comment">#include<sp/>&quot;cyber/cyber.h&quot;</highlight></codeline>
<codeline lineno="807"><highlight class="comment">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/><sp/>cyber::Init(argv[0]);</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>current<sp/>time<sp/>every<sp/>100ms</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/><sp/>cyber::Timer<sp/>timer(100,<sp/>[](){</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>cyber::Time::Now()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/><sp/>},<sp/>false);</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/><sp/>timer.Start()</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/>sleep(1);</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/>timer.Stop();</highlight></codeline>
<codeline lineno="816"><highlight class="comment">}</highlight></codeline>
<codeline lineno="817"><highlight class="comment">```</highlight></codeline>
<codeline lineno="818"><highlight class="comment"></highlight></codeline>
<codeline lineno="819"><highlight class="comment">##<sp/>Time<sp/>API</highlight></codeline>
<codeline lineno="820"><highlight class="comment"></highlight></codeline>
<codeline lineno="821"><highlight class="comment">Time<sp/>is<sp/>a<sp/>class<sp/>used<sp/>to<sp/>manage<sp/>time;<sp/>it<sp/>can<sp/>be<sp/>used<sp/>for<sp/>current<sp/>time<sp/>acquisition,<sp/>time-consuming<sp/>calculation,<sp/>time<sp/>conversion,<sp/>and<sp/>so<sp/>on.</highlight></codeline>
<codeline lineno="822"><highlight class="comment"></highlight></codeline>
<codeline lineno="823"><highlight class="comment">The<sp/>time<sp/>interfaces<sp/>are<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="824"><highlight class="comment"></highlight></codeline>
<codeline lineno="825"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="826"><highlight class="comment">//<sp/>constructor,<sp/>passing<sp/>in<sp/>a<sp/>different<sp/>value<sp/>to<sp/>construct<sp/>Time</highlight></codeline>
<codeline lineno="827"><highlight class="comment">Time(uint64_t<sp/>nanoseconds);<sp/>//uint64_t,<sp/>in<sp/>nanoseconds</highlight></codeline>
<codeline lineno="828"><highlight class="comment">Time(int<sp/>nanoseconds);<sp/>//<sp/>int<sp/>type,<sp/>unit:<sp/>nanoseconds</highlight></codeline>
<codeline lineno="829"><highlight class="comment">Time(double<sp/>seconds);<sp/>//<sp/>double,<sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="830"><highlight class="comment">Time(uint32_t<sp/>seconds,<sp/>uint32_t<sp/>nanoseconds);<sp/></highlight></codeline>
<codeline lineno="831"><highlight class="comment">//<sp/>seconds<sp/>seconds<sp/>+<sp/>nanoseconds<sp/>nanoseconds</highlight></codeline>
<codeline lineno="832"><highlight class="comment">Static<sp/>Time<sp/>Now();<sp/>//<sp/>Get<sp/>the<sp/>current<sp/>time</highlight></codeline>
<codeline lineno="833"><highlight class="comment">Double<sp/>ToSecond()<sp/>const;<sp/>//<sp/>convert<sp/>to<sp/>seconds</highlight></codeline>
<codeline lineno="834"><highlight class="comment">Uint64_t<sp/>ToNanosecond()<sp/>const;<sp/>//<sp/>Convert<sp/>to<sp/>nanoseconds</highlight></codeline>
<codeline lineno="835"><highlight class="comment">Std::string<sp/>ToString()<sp/>const;<sp/>//<sp/>Convert<sp/>to<sp/>a<sp/>string<sp/>in<sp/>the<sp/>format<sp/>&quot;2018-07-10<sp/>20:21:51.123456789&quot;</highlight></codeline>
<codeline lineno="836"><highlight class="comment">Bool<sp/>IsZero()<sp/>const;<sp/>//<sp/>Determine<sp/>if<sp/>the<sp/>time<sp/>is<sp/>0</highlight></codeline>
<codeline lineno="837"><highlight class="comment"></highlight></codeline>
<codeline lineno="838"><highlight class="comment">```</highlight></codeline>
<codeline lineno="839"><highlight class="comment"></highlight></codeline>
<codeline lineno="840"><highlight class="comment">A<sp/>code<sp/>example<sp/>can<sp/>be<sp/>seen<sp/>below:</highlight></codeline>
<codeline lineno="841"><highlight class="comment"></highlight></codeline>
<codeline lineno="842"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="843"><highlight class="comment">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline lineno="844"><highlight class="comment">#include<sp/>&quot;cyber/cyber.h&quot;</highlight></codeline>
<codeline lineno="845"><highlight class="comment">#include<sp/>&quot;cyber/duration.h&quot;</highlight></codeline>
<codeline lineno="846"><highlight class="comment">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/><sp/>cyber::Init(argv[0]);</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/><sp/><sp/>Time<sp/>t1(1531225311123456789UL);</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>t1.ToString()<sp/>std::endl;<sp/>//<sp/>2018-07-10<sp/>20:21:51.123456789</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Duration<sp/>time<sp/>interval</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/><sp/>Time<sp/>t1(100);</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/><sp/>Duration<sp/>d(200);</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/>Time<sp/>t2(300);</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/>assert(d<sp/>==<sp/>(t1-t2));<sp/>//<sp/>true</highlight></codeline>
<codeline lineno="855"><highlight class="comment">}</highlight></codeline>
<codeline lineno="856"><highlight class="comment"></highlight></codeline>
<codeline lineno="857"><highlight class="comment">```</highlight></codeline>
<codeline lineno="858"><highlight class="comment"></highlight></codeline>
<codeline lineno="859"><highlight class="comment">##<sp/>Record<sp/>file:<sp/>Read<sp/>and<sp/>Write</highlight></codeline>
<codeline lineno="860"><highlight class="comment"></highlight></codeline>
<codeline lineno="861"><highlight class="comment">###<sp/>Reading<sp/>the<sp/>Reader<sp/>file</highlight></codeline>
<codeline lineno="862"><highlight class="comment"></highlight></codeline>
<codeline lineno="863"><highlight class="comment">**RecordReader**<sp/>is<sp/>the<sp/>component<sp/>used<sp/>to<sp/>read<sp/>messages<sp/>in<sp/>the<sp/>cyber<sp/>framework.<sp/>Each<sp/>RecordReader<sp/>can<sp/>open<sp/>an<sp/>existing<sp/>record<sp/>file<sp/>through<sp/>the<sp/>`Open`<sp/>method,<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>asynchronously<sp/>read<sp/>the<sp/>information<sp/>in<sp/>the<sp/>record<sp/>file.<sp/>The<sp/>user<sp/>only<sp/>needs<sp/>to<sp/>execute<sp/>ReadMessage<sp/>to<sp/>extract<sp/>the<sp/>latest<sp/>message<sp/>in<sp/>RecordReader,<sp/>and<sp/>then<sp/>get<sp/>the<sp/>message<sp/>information<sp/>through<sp/>GetCurrentMessageChannelName,<sp/>GetCurrentRawMessage,<sp/>GetCurrentMessageTime.</highlight></codeline>
<codeline lineno="864"><highlight class="comment"></highlight></codeline>
<codeline lineno="865"><highlight class="comment">**RecordWriter**<sp/>is<sp/>the<sp/>component<sp/>used<sp/>to<sp/>record<sp/>messages<sp/>in<sp/>the<sp/>cyber<sp/>framework.<sp/>Each<sp/>RecordWriter<sp/>can<sp/>create<sp/>a<sp/>new<sp/>record<sp/>file<sp/>through<sp/>the<sp/>Open<sp/>method.<sp/>The<sp/>user<sp/>only<sp/>needs<sp/>to<sp/>execute<sp/>WriteMessage<sp/>and<sp/>WriteChannel<sp/>to<sp/>write<sp/>message<sp/>and<sp/>channel<sp/>information,<sp/>and<sp/>the<sp/>writing<sp/>process<sp/>is<sp/>asynchronous.</highlight></codeline>
<codeline lineno="866"><highlight class="comment"></highlight></codeline>
<codeline lineno="867"><highlight class="comment">###<sp/>Demo<sp/>-<sp/>example(cyber/examples/record.cc)</highlight></codeline>
<codeline lineno="868"><highlight class="comment">Write<sp/>100<sp/>RawMessage<sp/>to`TEST_FILE`<sp/>through<sp/>`test_write`<sp/>method,<sp/>then<sp/>read<sp/>them<sp/>out<sp/>through<sp/>`test_read`<sp/>method.</highlight></codeline>
<codeline lineno="869"><highlight class="comment"></highlight></codeline>
<codeline lineno="870"><highlight class="comment">```c</highlight></codeline>
<codeline lineno="871"><highlight class="comment">#include<sp/>&lt;string&gt;</highlight></codeline>
<codeline lineno="872"><highlight class="comment"></highlight></codeline>
<codeline lineno="873"><highlight class="comment">#include<sp/>&quot;cyber/cyber.h&quot;</highlight></codeline>
<codeline lineno="874"><highlight class="comment">#include<sp/>&quot;cyber/message/raw_message.h&quot;</highlight></codeline>
<codeline lineno="875"><highlight class="comment">#include<sp/>&quot;cyber/proto/record.pb.h&quot;</highlight></codeline>
<codeline lineno="876"><highlight class="comment">#include<sp/>&quot;cyber/record/record_message.h&quot;</highlight></codeline>
<codeline lineno="877"><highlight class="comment">#include<sp/>&quot;cyber/record/record_reader.h&quot;</highlight></codeline>
<codeline lineno="878"><highlight class="comment">#include<sp/>&quot;cyber/record/record_writer.h&quot;</highlight></codeline>
<codeline lineno="879"><highlight class="comment"></highlight></codeline>
<codeline lineno="880"><highlight class="comment">using<sp/>::apollo::cyber::record::RecordReader;</highlight></codeline>
<codeline lineno="881"><highlight class="comment">using<sp/>::apollo::cyber::record::RecordWriter;</highlight></codeline>
<codeline lineno="882"><highlight class="comment">using<sp/>::apollo::cyber::record::RecordMessage;</highlight></codeline>
<codeline lineno="883"><highlight class="comment">using<sp/>apollo::cyber::message::RawMessage;</highlight></codeline>
<codeline lineno="884"><highlight class="comment"></highlight></codeline>
<codeline lineno="885"><highlight class="comment">const<sp/>char<sp/>CHANNEL_NAME_1[]<sp/>=<sp/>&quot;/test/channel1&quot;;</highlight></codeline>
<codeline lineno="886"><highlight class="comment">const<sp/>char<sp/>CHANNEL_NAME_2[]<sp/>=<sp/>&quot;/test/channel2&quot;;</highlight></codeline>
<codeline lineno="887"><highlight class="comment">const<sp/>char<sp/>MESSAGE_TYPE_1[]<sp/>=<sp/>&quot;apollo.cyber.proto.Test&quot;;</highlight></codeline>
<codeline lineno="888"><highlight class="comment">const<sp/>char<sp/>MESSAGE_TYPE_2[]<sp/>=<sp/>&quot;apollo.cyber.proto.Channel&quot;;</highlight></codeline>
<codeline lineno="889"><highlight class="comment">const<sp/>char<sp/>PROTO_DESC[]<sp/>=<sp/>&quot;1234567890&quot;;</highlight></codeline>
<codeline lineno="890"><highlight class="comment">const<sp/>char<sp/>STR_10B[]<sp/>=<sp/>&quot;1234567890&quot;;</highlight></codeline>
<codeline lineno="891"><highlight class="comment">const<sp/>char<sp/>TEST_FILE[]<sp/>=<sp/>&quot;test.record&quot;;</highlight></codeline>
<codeline lineno="892"><highlight class="comment"></highlight></codeline>
<codeline lineno="893"><highlight class="comment">void<sp/>test_write(const<sp/>std::string<sp/>&amp;writefile)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/><sp/>RecordWriter<sp/>writer;</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/>writer.SetSizeOfFileSegmentation(0);</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/><sp/>writer.SetIntervalOfFileSegmentation(0);</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/><sp/>writer.Open(writefile);</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/>writer.WriteChannel(CHANNEL_NAME_1,<sp/>MESSAGE_TYPE_1,<sp/>PROTO_DESC);</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/>for<sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>msg<sp/>=<sp/>std::make_shared&lt;RawMessage&gt;(&quot;abc&quot;<sp/>+<sp/>std::to_string(i));</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/>writer.WriteMessage(CHANNEL_NAME_1,<sp/>msg,<sp/>888<sp/>+<sp/>i);<sp/></highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/><sp/>writer.Close();</highlight></codeline>
<codeline lineno="904"><highlight class="comment">}</highlight></codeline>
<codeline lineno="905"><highlight class="comment"></highlight></codeline>
<codeline lineno="906"><highlight class="comment">void<sp/>test_read(const<sp/>std::string<sp/>&amp;readfile)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/>RecordReader<sp/>reader(readfile);</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/>RecordMessage<sp/>message;</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/><sp/>uint64_t<sp/>msg_count<sp/>=<sp/>reader.GetMessageNumber(CHANNEL_NAME_1);</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;MSGTYPE:<sp/>&quot;<sp/>&lt;&lt;<sp/>reader.GetMessageType(CHANNEL_NAME_1);</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;MSGDESC:<sp/>&quot;<sp/>&lt;&lt;<sp/>reader.GetProtoDesc(CHANNEL_NAME_1);</highlight></codeline>
<codeline lineno="912"><highlight class="comment"></highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/>//<sp/>read<sp/>all<sp/>message</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/>uint64_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/>uint64_t<sp/>valid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>msg_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(reader.ReadMessage(&amp;message))<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;msg[&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;]-&gt;<sp/>&quot;</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;channel<sp/>name:<sp/>&quot;<sp/>&lt;&lt;<sp/>message.channel_name</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;;<sp/>content:<sp/>&quot;<sp/>&lt;&lt;<sp/>message.content</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;;<sp/>msg<sp/>time:<sp/>&quot;<sp/>&lt;&lt;<sp/>message.time;</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>valid++;</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/>&quot;read<sp/>msg[&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;]<sp/>failed&quot;;</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;static<sp/>msg=================&quot;;</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/><sp/>AINFO<sp/>&lt;&lt;<sp/>&quot;MSG<sp/>validmsg:totalcount:<sp/>&quot;<sp/>&lt;&lt;<sp/>valid<sp/>&lt;&lt;<sp/>&quot;:&quot;<sp/>&lt;&lt;<sp/>msg_count;</highlight></codeline>
<codeline lineno="929"><highlight class="comment">}</highlight></codeline>
<codeline lineno="930"><highlight class="comment"></highlight></codeline>
<codeline lineno="931"><highlight class="comment">int<sp/>main(int<sp/>argc,<sp/>char<sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/>apollo::cyber::Init(argv[0]);</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/><sp/>test_write(TEST_FILE);</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/><sp/>sleep(1);</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/><sp/>test_read(TEST_FILE);</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="937"><highlight class="comment">}</highlight></codeline>
<codeline lineno="938"><highlight class="comment">```</highlight></codeline>
<codeline lineno="939"><highlight class="comment">####<sp/>Build<sp/>and<sp/>run</highlight></codeline>
<codeline lineno="940"><highlight class="comment">-<sp/>Build:<sp/>bazel<sp/>build<sp/>cyber/examples/…</highlight></codeline>
<codeline lineno="941"><highlight class="comment">-<sp/>Run:<sp/>./bazel-bin/cyber/examples/record</highlight></codeline>
<codeline lineno="942"><highlight class="comment">-<sp/>Examining<sp/>result:</highlight></codeline>
<codeline lineno="943"><highlight class="comment"></highlight></codeline>
<codeline lineno="944"><highlight class="comment">```</highlight></codeline>
<codeline lineno="945"><highlight class="comment">I1124<sp/>16:56:27.248200<sp/>15118<sp/>record.cc:64]<sp/>[record]<sp/>msg[0]-&gt;<sp/>channel<sp/>name:<sp/>/test/channel1;<sp/>content:<sp/>abc0;<sp/>msg<sp/>time:<sp/>888</highlight></codeline>
<codeline lineno="946"><highlight class="comment">I1124<sp/>16:56:27.248227<sp/>15118<sp/>record.cc:64]<sp/>[record]<sp/>msg[1]-&gt;<sp/>channel<sp/>name:<sp/>/test/channel1;<sp/>content:<sp/>abc1;<sp/>msg<sp/>time:<sp/>889</highlight></codeline>
<codeline lineno="947"><highlight class="comment">I1124<sp/>16:56:27.248239<sp/>15118<sp/>record.cc:64]<sp/>[record]<sp/>msg[2]-&gt;<sp/>channel<sp/>name:<sp/>/test/channel1;<sp/>content:<sp/>abc2;<sp/>msg<sp/>time:<sp/>890</highlight></codeline>
<codeline lineno="948"><highlight class="comment">I1124<sp/>16:56:27.248252<sp/>15118<sp/>record.cc:64]<sp/>[record]<sp/>msg[3]-&gt;<sp/>channel<sp/>name:<sp/>/test/channel1;<sp/>content:<sp/>abc3;<sp/>msg<sp/>time:<sp/>891</highlight></codeline>
<codeline lineno="949"><highlight class="comment">I1124<sp/>16:56:27.248297<sp/>15118<sp/>record.cc:64]<sp/>[record]<sp/>msg[4]-&gt;<sp/>channel<sp/>name:<sp/>/test/channel1;<sp/>content:<sp/>abc4;<sp/>msg<sp/>time:<sp/>892</highlight></codeline>
<codeline lineno="950"><highlight class="comment">I1124<sp/>16:56:27.248378<sp/>15118<sp/>record.cc:64]<sp/>[record]<sp/>msg[5]-&gt;<sp/>channel<sp/>name:<sp/>/test/channel1;<sp/>content:<sp/>abc5;<sp/>msg<sp/>time:<sp/>893</highlight></codeline>
<codeline lineno="951"><highlight class="comment">...</highlight></codeline>
<codeline lineno="952"><highlight class="comment">I1124<sp/>16:56:27.250422<sp/>15118<sp/>record.cc:73]<sp/>[record]<sp/>static<sp/>msg=================</highlight></codeline>
<codeline lineno="953"><highlight class="comment">I1124<sp/>16:56:27.250434<sp/>15118<sp/>record.cc:74]<sp/>[record]<sp/>MSG<sp/>validmsg:totalcount:<sp/>100:100</highlight></codeline>
<codeline lineno="954"><highlight class="comment">```</highlight></codeline>
<codeline lineno="955"><highlight class="comment"></highlight></codeline>
<codeline lineno="956"><highlight class="comment">##<sp/>API<sp/>Directory</highlight></codeline>
<codeline lineno="957"><highlight class="comment"></highlight></codeline>
<codeline lineno="958"><highlight class="comment">###<sp/>Node<sp/>API</highlight></codeline>
<codeline lineno="959"><highlight class="comment">For<sp/>additional<sp/>information<sp/>and<sp/>examples,<sp/>refer<sp/>to<sp/>[Node](#node)</highlight></codeline>
<codeline lineno="960"><highlight class="comment"></highlight></codeline>
<codeline lineno="961"><highlight class="comment">###<sp/>API<sp/>List</highlight></codeline>
<codeline lineno="962"><highlight class="comment"></highlight></codeline>
<codeline lineno="963"><highlight class="comment">```C</highlight></codeline>
<codeline lineno="964"><highlight class="comment">//create<sp/>writer<sp/>with<sp/>user-define<sp/>attr<sp/>and<sp/>message<sp/>type</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/><sp/>auto<sp/>CreateWriter(const<sp/>proto::RoleAttributes&amp;<sp/>role_attr)</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;transport::Writer&lt;MessageT&gt;&gt;;</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/><sp/>//create<sp/>reader<sp/>with<sp/>user-define<sp/>attr,<sp/>callback<sp/>and<sp/>message<sp/>type</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/><sp/>auto<sp/>CreateReader(const<sp/>proto::RoleAttributes&amp;<sp/>role_attr,</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>croutine::CRoutineFunc&lt;MessageT&gt;&amp;<sp/>reader_func)</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;transport::Reader&lt;MessageT&gt;&gt;;</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/><sp/>//create<sp/>writer<sp/>with<sp/>specific<sp/>channel<sp/>name<sp/>and<sp/>message<sp/>type</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/><sp/>auto<sp/>CreateWriter(const<sp/>std::string&amp;<sp/>channel_name)</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;transport::Writer&lt;MessageT&gt;&gt;;</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/><sp/>//create<sp/>reader<sp/>with<sp/>specific<sp/>channel<sp/>name,<sp/>callback<sp/>and<sp/>message<sp/>type</highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/><sp/>auto<sp/>CreateReader(const<sp/>std::string&amp;<sp/>channel_name,</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>croutine::CRoutineFunc&lt;MessageT&gt;&amp;<sp/>reader_func)</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;transport::Reader&lt;MessageT&gt;&gt;;</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/>//create<sp/>reader<sp/>with<sp/>user-define<sp/>config,<sp/>callback<sp/>and<sp/>message<sp/>type</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/>auto<sp/>CreateReader(const<sp/>ReaderConfig&amp;<sp/>config,</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>CallbackFunc&lt;MessageT&gt;&amp;<sp/>reader_func)</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;cybertron::Reader&lt;MessageT&gt;&gt;;</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/><sp/>//create<sp/>service<sp/>with<sp/>name<sp/>and<sp/>specific<sp/>callback</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/><sp/>auto<sp/>CreateService(const<sp/>std::string&amp;<sp/>service_name,</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>typename<sp/>service::Service&lt;Request,<sp/>Response&gt;::ServiceCallback&amp;<sp/>service_calllback)</highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;service::Service&lt;Request,<sp/>Response&gt;&gt;;</highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/><sp/>//create<sp/>client<sp/>with<sp/>name<sp/>to<sp/>send<sp/>request<sp/>to<sp/>server</highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/><sp/>auto<sp/>CreateClient(const<sp/>std::string&amp;<sp/>service_name)</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>std::shared_ptr&lt;service::Client&lt;Request,<sp/>Response&gt;&gt;;</highlight></codeline>
<codeline lineno="989"><highlight class="comment"></highlight></codeline>
<codeline lineno="990"><highlight class="comment">```</highlight></codeline>
<codeline lineno="991"><highlight class="comment"></highlight></codeline>
<codeline lineno="992"><highlight class="comment">##<sp/>Writer<sp/>API</highlight></codeline>
<codeline lineno="993"><highlight class="comment">For<sp/>additional<sp/>information<sp/>and<sp/>examples,<sp/>refer<sp/>to<sp/>[Writer](#writer)</highlight></codeline>
<codeline lineno="994"><highlight class="comment"></highlight></codeline>
<codeline lineno="995"><highlight class="comment">###<sp/>API<sp/>List</highlight></codeline>
<codeline lineno="996"><highlight class="comment"></highlight></codeline>
<codeline lineno="997"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="998"><highlight class="comment">bool<sp/>Write(const<sp/>std::shared_ptr&lt;MessageT&gt;&amp;<sp/>message);</highlight></codeline>
<codeline lineno="999"><highlight class="comment">```</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"></highlight></codeline>
<codeline lineno="1001"><highlight class="comment">##<sp/>Client<sp/>API</highlight></codeline>
<codeline lineno="1002"><highlight class="comment">For<sp/>additional<sp/>information<sp/>and<sp/>examples,<sp/>refer<sp/>to<sp/>[Client](#service-creation-and-use)</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"></highlight></codeline>
<codeline lineno="1004"><highlight class="comment">###<sp/>API<sp/>List</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"></highlight></codeline>
<codeline lineno="1006"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1007"><highlight class="comment">SharedResponse<sp/>SendRequest(SharedRequest<sp/>request,</highlight></codeline>
<codeline lineno="1008"><highlight class="comment">const<sp/>std::chrono::seconds&amp;<sp/>timeout_s<sp/>=<sp/>std::chrono::seconds(5));SharedResponse<sp/>SendRequest(const<sp/>Request&amp;<sp/>request,</highlight></codeline>
<codeline lineno="1009"><highlight class="comment">const<sp/>std::chrono::seconds&amp;<sp/>timeout_s<sp/>=<sp/>std::chrono::seconds(5));</highlight></codeline>
<codeline lineno="1010"><highlight class="comment">```</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"></highlight></codeline>
<codeline lineno="1012"><highlight class="comment">##<sp/>Parameter<sp/>API</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"></highlight></codeline>
<codeline lineno="1014"><highlight class="comment">The<sp/>interface<sp/>that<sp/>the<sp/>user<sp/>uses<sp/>to<sp/>perform<sp/>parameter<sp/>related<sp/>operations:</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"></highlight></codeline>
<codeline lineno="1016"><highlight class="comment">-<sp/>Set<sp/>the<sp/>parameter<sp/>related<sp/>API.</highlight></codeline>
<codeline lineno="1017"><highlight class="comment">-<sp/>Read<sp/>the<sp/>parameter<sp/>related<sp/>API.</highlight></codeline>
<codeline lineno="1018"><highlight class="comment">-<sp/>Create<sp/>a<sp/>ParameterService<sp/>to<sp/>provide<sp/>parameter<sp/>service<sp/>related<sp/>APIs<sp/>for<sp/>other<sp/>nodes.</highlight></codeline>
<codeline lineno="1019"><highlight class="comment">-<sp/>Create<sp/>a<sp/>ParameterClient<sp/>that<sp/>uses<sp/>the<sp/>parameters<sp/>provided<sp/>by<sp/>other<sp/>nodes<sp/>to<sp/>service<sp/>related<sp/>APIs.</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"></highlight></codeline>
<codeline lineno="1021"><highlight class="comment">For<sp/>additional<sp/>information<sp/>and<sp/>examples,<sp/>refer<sp/>to<sp/>[Parameter](##param-parameter-service)</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"></highlight></codeline>
<codeline lineno="1023"><highlight class="comment">###<sp/>API<sp/>List<sp/>-<sp/>Setting<sp/>parameters</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"></highlight></codeline>
<codeline lineno="1025"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/>Parameter();<sp/><sp/>//<sp/>Name<sp/>is<sp/>empty,<sp/>type<sp/>is<sp/>NOT_SET</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/><sp/>explicit<sp/>Parameter(const<sp/>Parameter&amp;<sp/>parameter);</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/><sp/>explicit<sp/>Parameter(const<sp/>std::string&amp;<sp/>name);<sp/><sp/>//<sp/>Type<sp/>is<sp/>NOT_SET</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>bool<sp/>bool_value);<sp/><sp/></highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>int<sp/>int_value);</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>int64_t<sp/>int_value);</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>float<sp/>double_value);</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>double<sp/>double_value);</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>std::string&amp;<sp/>string_value);</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>char*<sp/>string_value);</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>std::string&amp;<sp/>msg_str,</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>full_name,<sp/>const<sp/>std::string&amp;<sp/>proto_desc);</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/>Parameter(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>google::protobuf::Message&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="1039"><highlight class="comment">```</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"></highlight></codeline>
<codeline lineno="1041"><highlight class="comment">###<sp/>API<sp/>List<sp/>-<sp/>Reading<sp/>parameters</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"></highlight></codeline>
<codeline lineno="1043"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/>inline<sp/>ParamType<sp/>type()<sp/>const;</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/><sp/>inline<sp/>std::string<sp/>TypeName()<sp/>const;</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/>inline<sp/>std::string<sp/>Descriptor()<sp/>const;</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/><sp/>inline<sp/>const<sp/>std::string<sp/>Name()<sp/>const;</highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/><sp/>inline<sp/>bool<sp/>AsBool()<sp/>const;</highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/><sp/>inline<sp/>int64_t<sp/>AsInt64()<sp/>const;</highlight></codeline>
<codeline lineno="1050"><highlight class="comment"><sp/><sp/>inline<sp/>double<sp/>AsDouble()<sp/>const;</highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/><sp/>inline<sp/>const<sp/>std::string<sp/>AsString()<sp/>const;</highlight></codeline>
<codeline lineno="1052"><highlight class="comment"><sp/><sp/>std::string<sp/>DebugString()<sp/>const;</highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/><sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_base_of&lt;google::protobuf::Message,<sp/>Type&gt;::value,<sp/>Type&gt;::type</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/><sp/>value()<sp/>const;</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/><sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_integral&lt;Type&gt;::value<sp/>&amp;&amp;<sp/>!std::is_same&lt;Type,<sp/>bool&gt;::value,<sp/>Type&gt;::type</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/><sp/>value()<sp/>const;</highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/><sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_floating_point&lt;Type&gt;::value,<sp/>Type&gt;::type</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"><sp/><sp/>value()<sp/>const;</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/><sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight></codeline>
<codeline lineno="1063"><highlight class="comment"><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_convertible&lt;Type,<sp/>std::string&gt;::value,<sp/>const<sp/>std::string&amp;&gt;::type</highlight></codeline>
<codeline lineno="1064"><highlight class="comment"><sp/><sp/>value()<sp/>const;</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/><sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_same&lt;Type,<sp/>bool&gt;::value,<sp/>bool&gt;::type<sp/></highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/><sp/>value()<sp/>const;</highlight></codeline>
<codeline lineno="1068"><highlight class="comment">```</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"></highlight></codeline>
<codeline lineno="1070"><highlight class="comment">###<sp/>API<sp/>List<sp/>-<sp/>Creating<sp/>parameter<sp/>service</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"></highlight></codeline>
<codeline lineno="1072"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/><sp/>explicit<sp/>ParameterService(const<sp/>std::shared_ptr&lt;Node&gt;&amp;<sp/>node);</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/><sp/>void<sp/>SetParameter(const<sp/>Parameter&amp;<sp/>parameter);</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/><sp/>bool<sp/>GetParameter(const<sp/>std::string&amp;<sp/>param_name,<sp/>Parameter*<sp/>parameter);</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/><sp/>bool<sp/>ListParameters(std::vector&lt;Parameter&gt;*<sp/>parameters);</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"></highlight></codeline>
<codeline lineno="1078"><highlight class="comment">```</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"></highlight></codeline>
<codeline lineno="1080"><highlight class="comment">###<sp/>API<sp/>List<sp/>-<sp/>Creating<sp/>parameter<sp/>client</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"></highlight></codeline>
<codeline lineno="1082"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/>ParameterClient(const<sp/>std::shared_ptr&lt;Node&gt;&amp;<sp/>node,<sp/>const<sp/>std::string&amp;<sp/>service_node_name);</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/>bool<sp/>SetParameter(const<sp/>Parameter&amp;<sp/>parameter);</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/><sp/>bool<sp/>GetParameter(const<sp/>std::string&amp;<sp/>param_name,<sp/>Parameter*<sp/>parameter);</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"><sp/><sp/>bool<sp/>ListParameters(std::vector&lt;Parameter&gt;*<sp/>parameters);</highlight></codeline>
<codeline lineno="1087"><highlight class="comment">```</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"></highlight></codeline>
<codeline lineno="1089"><highlight class="comment"></highlight></codeline>
<codeline lineno="1090"><highlight class="comment">##<sp/>Timer<sp/>API</highlight></codeline>
<codeline lineno="1091"><highlight class="comment">You<sp/>can<sp/>set<sp/>the<sp/>parameters<sp/>of<sp/>the<sp/>Timer<sp/>and<sp/>call<sp/>the<sp/>start<sp/>and<sp/>stop<sp/>interfaces<sp/>to<sp/>start<sp/>the<sp/>timer<sp/>and<sp/>stop<sp/>the<sp/>timer.</highlight></codeline>
<codeline lineno="1092"><highlight class="comment">For<sp/>additional<sp/>information<sp/>and<sp/>examples,<sp/>refer<sp/>to<sp/>[Timer](#timer)</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"></highlight></codeline>
<codeline lineno="1094"><highlight class="comment">###<sp/>API<sp/>List</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"></highlight></codeline>
<codeline lineno="1096"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/>Timer(uint32_t<sp/>period,<sp/>std::function&lt;void()&gt;<sp/>callback,<sp/>bool<sp/>oneshot);</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/>Timer(TimerOption<sp/>opt);</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/>void<sp/>SetTimerOption(TimerOption<sp/>opt);</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/><sp/>void<sp/>Start();</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/><sp/>void<sp/>Stop();</highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/><sp/>```</highlight></codeline>
<codeline lineno="1103"><highlight class="comment"></highlight></codeline>
<codeline lineno="1104"><highlight class="comment">##<sp/>Time<sp/>API</highlight></codeline>
<codeline lineno="1105"><highlight class="comment">For<sp/>additional<sp/>information<sp/>and<sp/>examples,<sp/>refer<sp/>to<sp/>[Time](#use-of-time)</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"></highlight></codeline>
<codeline lineno="1107"><highlight class="comment">###<sp/>API<sp/>List</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"></highlight></codeline>
<codeline lineno="1109"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/><sp/>static<sp/>const<sp/>Time<sp/>MAX;</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/>static<sp/>const<sp/>Time<sp/>MIN;</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/>Time()<sp/>{}</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/>explicit<sp/>Time(uint64_t<sp/>nanoseconds);</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"><sp/><sp/>explicit<sp/>Time(int<sp/>nanoseconds);</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/>explicit<sp/>Time(double<sp/>seconds);</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/>Time(uint32_t<sp/>seconds,<sp/>uint32_t<sp/>nanoseconds);</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/>Time(const<sp/>Time&amp;<sp/>other);</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/><sp/>static<sp/>Time<sp/>Now();</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/><sp/>static<sp/>Time<sp/>MonoTime();</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/><sp/>static<sp/>void<sp/>SleepUntil(const<sp/>Time&amp;<sp/>time);</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/>double<sp/>ToSecond()<sp/>const;</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/>uint64_t<sp/>ToNanosecond()<sp/>const;</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/><sp/>std::string<sp/>ToString()<sp/>const;</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/>bool<sp/>IsZero()<sp/>const;</highlight></codeline>
<codeline lineno="1125"><highlight class="comment">```</highlight></codeline>
<codeline lineno="1126"><highlight class="comment"></highlight></codeline>
<codeline lineno="1127"><highlight class="comment">##<sp/>Duration<sp/>API</highlight></codeline>
<codeline lineno="1128"><highlight class="comment">Interval-related<sp/>interface,<sp/>used<sp/>to<sp/>indicate<sp/>the<sp/>time<sp/>interval,<sp/>can<sp/>be<sp/>initialized<sp/>according<sp/>to<sp/>the<sp/>specified<sp/>nanosecond<sp/>or<sp/>second.</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"></highlight></codeline>
<codeline lineno="1130"><highlight class="comment">###<sp/>API<sp/>List</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"></highlight></codeline>
<codeline lineno="1132"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/>Duration()<sp/>{}</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/>Duration(int64_t<sp/>nanoseconds);</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/>Duration(int<sp/>nanoseconds);</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/>Duration(double<sp/>seconds);</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/><sp/>Duration(uint32_t<sp/>seconds,<sp/>uint32_t<sp/>nanoseconds);</highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/><sp/>Duration(const<sp/>Rate&amp;<sp/>rate);</highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/><sp/>Duration(const<sp/>Duration&amp;<sp/>other);</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/>double<sp/>ToSecond()<sp/>const;</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/><sp/>int64_t<sp/>ToNanosecond()<sp/>const;</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/>bool<sp/>IsZero()<sp/>const;</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/>void<sp/>Sleep()<sp/>const;</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/><sp/>```</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"></highlight></codeline>
<codeline lineno="1146"><highlight class="comment">##<sp/>Rate<sp/>API</highlight></codeline>
<codeline lineno="1147"><highlight class="comment">The<sp/>frequency<sp/>interface<sp/>is<sp/>generally<sp/>used<sp/>to<sp/>initialize<sp/>the<sp/>time<sp/>of<sp/>the<sp/>sleep<sp/>frequency<sp/>after<sp/>the<sp/>object<sp/>is<sp/>initialized<sp/>according<sp/>to<sp/>the<sp/>specified<sp/>frequency.</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"></highlight></codeline>
<codeline lineno="1149"><highlight class="comment">###<sp/>API<sp/>List</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"></highlight></codeline>
<codeline lineno="1151"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1152"><highlight class="comment"><sp/><sp/>Rate(double<sp/>frequency);</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/>Rate(uint64_t<sp/>nanoseconds);</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/><sp/>Rate(const<sp/>Duration&amp;);</highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/><sp/>void<sp/>Sleep();</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/><sp/>void<sp/>Reset();</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/><sp/>Duration<sp/>CycleTime()<sp/>const;</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/><sp/>Duration<sp/>ExpectedCycleTime()<sp/>const<sp/>{<sp/>return<sp/>expected_cycle_time_;<sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="comment">```</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"></highlight></codeline>
<codeline lineno="1161"><highlight class="comment">##<sp/>RecordReader<sp/>API</highlight></codeline>
<codeline lineno="1162"><highlight class="comment">The<sp/>interface<sp/>for<sp/>reading<sp/>the<sp/>record<sp/>file<sp/>is<sp/>used<sp/>to<sp/>read<sp/>the<sp/>message<sp/>and<sp/>channel<sp/>information<sp/>in<sp/>the<sp/>record<sp/>file.</highlight></codeline>
<codeline lineno="1163"><highlight class="comment"></highlight></codeline>
<codeline lineno="1164"><highlight class="comment">###<sp/>API<sp/>List</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"></highlight></codeline>
<codeline lineno="1166"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/><sp/>RecordReader();</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/><sp/>bool<sp/>Open(const<sp/>std::string&amp;<sp/>filename,<sp/>uint64_t<sp/>begin_time<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>end_time<sp/>=<sp/>UINT64_MAX);</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/><sp/>void<sp/>Close();</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/><sp/>bool<sp/>ReadMessage();</highlight></codeline>
<codeline lineno="1172"><highlight class="comment"><sp/><sp/>bool<sp/>EndOfFile();</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/><sp/>const<sp/>std::string&amp;<sp/>CurrentMessageChannelName();</highlight></codeline>
<codeline lineno="1174"><highlight class="comment"><sp/><sp/>std::shared_ptr&lt;RawMessage&gt;<sp/>CurrentRawMessage();</highlight></codeline>
<codeline lineno="1175"><highlight class="comment"><sp/><sp/>uint64_t<sp/>CurrentMessageTime();</highlight></codeline>
<codeline lineno="1176"><highlight class="comment"><sp/><sp/>```</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"></highlight></codeline>
<codeline lineno="1178"><highlight class="comment">##<sp/>RecordWriter<sp/>API</highlight></codeline>
<codeline lineno="1179"><highlight class="comment">The<sp/>interface<sp/>for<sp/>writing<sp/>the<sp/>record<sp/>file,<sp/>used<sp/>to<sp/>record<sp/>the<sp/>message<sp/>and<sp/>channel<sp/>information<sp/>into<sp/>the<sp/>record<sp/>file.</highlight></codeline>
<codeline lineno="1180"><highlight class="comment"></highlight></codeline>
<codeline lineno="1181"><highlight class="comment">###<sp/>API<sp/>List</highlight></codeline>
<codeline lineno="1182"><highlight class="comment"></highlight></codeline>
<codeline lineno="1183"><highlight class="comment">```C<sp/></highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/>RecordWriter();</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/><sp/>bool<sp/>Open(const<sp/>std::string&amp;<sp/>file);</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/><sp/>void<sp/>Close();</highlight></codeline>
<codeline lineno="1187"><highlight class="comment"><sp/><sp/>bool<sp/>WriteChannel(const<sp/>std::string&amp;<sp/>name,<sp/>const<sp/>std::string&amp;<sp/>type,</highlight></codeline>
<codeline lineno="1188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>proto_desc);</highlight></codeline>
<codeline lineno="1189"><highlight class="comment"><sp/><sp/>template<sp/>&lt;typename<sp/>MessageT&gt;</highlight></codeline>
<codeline lineno="1190"><highlight class="comment"><sp/><sp/>bool<sp/>WriteMessage(const<sp/>std::string&amp;<sp/>channel_name,<sp/>const<sp/>MessageT&amp;<sp/>message,</highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>uint64_t<sp/>time_nanosec,</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>proto_desc<sp/>=<sp/>&quot;&quot;);</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/><sp/>bool<sp/>SetSizeOfFileSegmentation(uint64_t<sp/>size_kilobytes);</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/><sp/>bool<sp/>SetIntervalOfFileSegmentation(uint64_t<sp/>time_sec);</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/><sp/>```</highlight></codeline>
    </programlisting>
    <location file="/home/work/apollo-fork/apollo/cyber/docs/CyberRT_API_for_Developers.md"/>
  </compounddef>
</doxygen>
